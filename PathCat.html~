<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2018-12-01 Sat 08:25 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Graphs are to categories as lists are to monoids</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Musa Al-hassy" />
<meta name="description" content="????????????? How do friends communicate secretly using non-invertible operations such as minimum? An introduction to Heyting Algebra --an instance of Cartesian Closed Categories!"
 />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "left",
        displayIndent: "5em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "Neo-Euler"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "Neo-Euler"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="content">
<h1 class="title">Graphs are to categories as lists are to monoids</h1>

<div id="myMathJaxStuff" style="display: none;">
<p>
We do not want the MathJax declarations to use vertical whitespace;
so we do not display their residual whitespace.
</p>

<p>
Moreover the form of MathJax declarations differs from usual LaTeX
declarations, so we iffalse&#x2026;fi these ones.
</p>

<p>
Commenting the MathJax using &lt;!&#x2013; HTML comments &#x2013;&gt;
makes the commands inaccessible elsewhere.
</p>

<p>
The alternative is to declare a <a href="https://stackoverflow.com/questions/1992114/how-do-you-create-a-hidden-div-that-doesnt-create-a-line-break-or-horizontal-sp">non-displayed ~div</a>~.
</p>

<p>
\[\newcommand{\step}[1]{ \\ = \;\; & \qquad \color{maroon}{⟨ \text{ #1 } ⟩} \\ & }\]
\[\newcommand{\stepWith}[2]{ \\ #1 \;\; & \qquad \color{maroon}{⟨ \text{ #2 } ⟩} \\ & }\]
\[\newenvironment{calc}{\begin{align*} & }{\end{align*}}\]
</p>

<p>
Having identical label references for different equations will break rendering!
</p>

<p>
eqn            := display name, then display formula.
eqnColour      := display name, then display formula, then colour
eqnLabel       := display name, then display formula, then label
eqnLabelColour := display name, then display formula, then label, then colour
eqnLabelColour := display name, then display formula, then colour, then label &#x2013; safe redundancy!
</p>

<p>
\[\newcommand{\eqnLabelColour}[4]{ \begin{equation} \color{#4}{#2} \label{#3}\tag{$\color{#4}{\text{#1}}$} \end{equation} }\]
</p>

<p>
\[\newcommand{\eqnColourLabel}[4]{ \eqnLabelColour{#1}{#2}{#4}{#3} }\]
</p>

<p>
Default equation colour is: navy
\[\newcommand{\eqnLabel}[3]{ \eqnLabelColour{#1}{#2}{#3}{navy} }\]
</p>

<p>
Default label is the display name
\[\newcommand{\eqnColour}[3]{ \eqnLabelColour{#1}{#2}{#1}{#3} }\]
</p>

<p>
\[\newcommand{\eqn}[2]{ \eqnLabel{#1}{#2}{#1} }\]
</p>

<p>
Notice that \ref{Label} and \ref{Label2} have the same displayed name,
but <b>cannot</b> have the same label!
</p>

<p>
\[\newcommand{\givens}[1]{ \color{teal}{#1} }\]
\[\newcommand{\requireds}[1]{ \color{navy}{#1} }\]
</p>

<p>
\[\def\lands{\;\land\;}\]
\[\def\landS{\quad\land\quad}\]
</p>

<p>
\[\def\impliess{\;\Rightarrow\;}\]
\[\def\impliesS{\quad\Rightarrow\quad}\]
</p>

<p>
\[\def\equivs{\;\equiv\;}\]
\[\def\equivS{\quad\equiv\quad}\]
</p>

<p>
\[\def\eqs{\;=\;}\]
\[\def\eqS{\quad=\quad}\]
</p>

<p>
\[\def\sqleqs{\;\sqsubseteq\;}\]
\[\def\sqleqS{\quad\sqsubseteq\quad}\]
</p>

<p>
After this, only pure latex commands should exist.
</p>

<p>
However, the whitespace they produce via MathJax is ignored
since the HTML div is not yet closed.
</p>



</div>

<div class="org-center">
<p>
<b>Abstract</b>
</p>
</div>
<p>
Assuming familiarity with the Agda programming language, we motivate the need for
basic concepts of category theory with the aim of discussing adjunctions with
a running example of a detailed construction and proof of a free functor.
</p>

<div id="outline-container-org601daca" class="outline-2">
<h2 id="org601daca"><span class="section-number-2">1</span> Introduction</h2>
<div class="outline-text-2" id="text-1">
<p>
Lists give free monoids <code>𝓁 A = (List A, ++, [])</code>
&#x2014; a monoid <code>𝒮 = (S, ⊕, 0₊)</code> is a triple consisting of a set with a binary operation on it that is
associative and has a unit.
That it is ‘free’ means that to define a structure-preserving map between monoids
<code>(List A, ++, []) ⟶ (S, ⊕, 0₊)</code> it suffices to only provide a map between their
carriers <code>List A → S</code> &#x2014;freedom means that plain old maps between types freely,
at no cost or effort, give rise to maps that preserve monoid structure.
Moreover, the converse also holds and in-fact we have a bijection
</p>
<pre class="example">
  (𝓁 A ⟶ 𝒮) ≅ (A ⟶ 𝒰 𝒮)
</pre>
<p>
where we write <code>𝒰 (S, ⊕, 0₊) = S</code> for the operation that gives us the <code>𝒰</code>-nderlying carrier
of a monoid.
</p>

<p>
Loosely put, one says we have an ‘adjunction’, written <code>𝓁 ⊣ 𝒰</code>.
</p>

<p>
Observe that natural numbers <code>ℕ ≅ List Unit</code> are a monoid whose operation is commutative,
by using different kinds of elements <code>A</code> (and, importantly, still not imposing any equations),
we lose commutativity with <code>List A</code>.
Then by generalizing further to binary trees <code>BinTree A</code>, we lose associtivity and identity
are are only left with a set and an operation on it &#x2014;a structure called a ‘magma’.
</p>

<p>
This is the order that one usually learns about these inductively built structures.
One might be curious as to what the next step up is in this hierarchy of generalisations.
It is a non-inductive type called a ‘graph’ and in this note we investigate them by
comparison to lists.
Just as we shifted structures in the hierarchy, we will
move to a setting called a ‘category’ &#x2014;such are more structured than magmas
but less restrictive than monoids.
</p>
</div>

<div id="outline-container-orgcc11bf6" class="outline-3">
<h3 id="orgcc11bf6">Imports</h3>
<div class="outline-text-3" id="text-orgcc11bf6">
<p>
Since the Agda prelude is so simple, the core language doesn’t even come with booleans or numbers by default
&#x2014;they must be imported from the standard library. This is a pleasant feature.
As a result, Agda code tends to begin with a host of imports.
</p>

<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #0000cd;">mmodule</span> <span style="color: #a020f0;">PathCat</span> <span style="color: #cd6600;">where</span>

<span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Level</span> <span style="color: #cd6600;">using</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Level</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">renaming</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">zero</span> <span style="color: #0000cd;">to</span> &#8467;&#8320; ; <span style="color: #0000cd;">suc</span> <span style="color: #0000cd;">to</span> &#8467;<span style="color: #0000cd;">suc</span> ; _&#8852;_ <span style="color: #0000cd;">to</span> _&#8845;_<span style="color: #707183;">)</span>

-- <span style="color: #0000cd;">numbers</span>
<span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Data.Fin</span>
  <span style="color: #cd6600;">using</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Fin</span> ; <span style="color: #0000cd;">to</span><span style="color: #228b22;">&#8469;</span> ; <span style="color: #0000cd;">from</span><span style="color: #228b22;">&#8469;</span> ; <span style="color: #0000cd;">from</span><span style="color: #228b22;">&#8469;</span>&#8804; ; <span style="color: #0000cd;">reduce</span>&#8805; ; <span style="color: #0000cd;">inject</span>&#8804;<span style="color: #707183;">)</span>
  <span style="color: #cd6600;">renaming</span> <span style="color: #707183;">(</span>_&lt;_ <span style="color: #0000cd;">to</span> _<span style="color: #0000cd;">f</span>&lt;_ ; <span style="color: #0000cd;">zero</span> <span style="color: #0000cd;">to</span> <span style="color: #0000cd;">fzero</span> ; <span style="color: #0000cd;">suc</span> <span style="color: #0000cd;">to</span> <span style="color: #0000cd;">fsuc</span><span style="color: #707183;">)</span>
<span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Data.Nat</span>
<span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Relation.Binary</span> <span style="color: #cd6600;">using</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">mmodule</span> <span style="color: #a020f0;">DecTotalOrder</span><span style="color: #707183;">)</span>
<span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Data.Nat.Properties</span> <span style="color: #cd6600;">using</span><span style="color: #707183;">(</span>&#8804;-<span style="color: #0000cd;">decTotalOrder</span> ; &#8804;-<span style="color: #0000cd;">refl</span><span style="color: #707183;">)</span>
<span style="color: #cd6600;">open</span><span style="color: #228b22;"> DecTotalOrder Data</span>.N<span style="color: #0000cd;">at</span>.P<span style="color: #0000cd;">roperties</span>.&#8804;-<span style="color: #0000cd;">decTotalOrder</span>

--<span style="color: #228b22;"> Z-notation</span> <span style="color: #0000cd;">for</span> <span style="color: #0000cd;">sums</span>
<span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Data.Product</span> <span style="color: #cd6600;">using</span> <span style="color: #707183;">(</span>&#931; ; <span style="color: #0000cd;">proj</span>&#8321; ; <span style="color: #0000cd;">proj</span>&#8322; ; _&#215;_ ; _,_<span style="color: #707183;">)</span>
&#931;&#8758;&#8226; : <span style="color: #707183;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span> :<span style="color: #228b22;"> Level</span><span style="color: #88090B;">}</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">A</span> : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">a</span><span style="color: #707183;">)</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">B</span> :<span style="color: #228b22;"> A</span> &#8594; <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">b</span><span style="color: #707183;">)</span> &#8594; <span style="color: #cd6600;">Set</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">a</span> &#8845; <span style="color: #0000cd;">b</span><span style="color: #707183;">)</span>
&#931;&#8758;&#8226; <span style="color: #cd6600;">=</span> &#931;
<span style="color: #cd6600;">infix</span> -<span style="color: #a020f0;">666</span> &#931;&#8758;&#8226;
<span style="color: #cd6600;">syntax</span> &#931;&#8758;&#8226;<span style="color: #228b22;"> A</span> <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">x</span> &#8594;<span style="color: #228b22;"> B</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">=</span> &#931; <span style="color: #0000cd;">x</span> &#8758;<span style="color: #228b22;"> A</span> &#8226;<span style="color: #228b22;"> B</span>

-- <span style="color: #0000cd;">equalities</span>
<span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Relation.Binary.PropositionalEquality</span> <span style="color: #cd6600;">using</span> <span style="color: #707183;">(</span>_&#8791;_ ; _&#8801;_<span style="color: #707183;">)</span>
  <span style="color: #cd6600;">renaming</span><span style="color: #707183;">(</span><span style="color: #0000cd;">sym</span> <span style="color: #0000cd;">to</span> &#8801;-<span style="color: #0000cd;">sym</span> ; <span style="color: #0000cd;">refl</span> <span style="color: #0000cd;">to</span> &#8801;-<span style="color: #0000cd;">refl</span> ; <span style="color: #0000cd;">trans</span> <span style="color: #0000cd;">to</span> _<span style="color: #7388d6;">&#10216;</span>&#8801;&#8801;<span style="color: #7388d6;">&#10217;</span>_ ; <span style="color: #0000cd;">cong</span> <span style="color: #0000cd;">to</span> &#8801;-<span style="color: #0000cd;">cong</span> ; <span style="color: #0000cd;">cong</span>&#8322; <span style="color: #0000cd;">to</span> &#8801;-<span style="color: #0000cd;">cong</span>&#8322;
   ; <span style="color: #0000cd;">subst</span> <span style="color: #0000cd;">to</span> &#8801;-<span style="color: #0000cd;">subst</span> ; <span style="color: #0000cd;">subst</span>&#8322; <span style="color: #0000cd;">to</span> &#8801;-<span style="color: #0000cd;">subst</span>&#8322; ; <span style="color: #0000cd;">setoid</span> <span style="color: #0000cd;">to</span> &#8801;-<span style="color: #0000cd;">setoid</span><span style="color: #707183;">)</span>
</pre>
</div>

<p>
Notice that we renamed transitivity to be an infix combinator.
</p>

<p>
Let us make equational-style proofs available for any type.
</p>

<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #0000cd;">mmodule</span> <span style="color: #a020f0;">_</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>S : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">where</span>
    <span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Relation.Binary.EqReasoning</span> <span style="color: #707183;">(</span>&#8801;-<span style="color: #0000cd;">setoid</span><span style="color: #228b22;"> S</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">public</span>

-- <span style="color: #0000cd;">synonym</span> <span style="color: #0000cd;">for</span> <span style="color: #0000cd;">readability</span>
<span style="color: #0000cd;">definition</span> : &#8704;<span style="color: #707183;">{</span><span style="color: #0000cd;">a</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>A : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">a</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> :<span style="color: #228b22;"> A</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">x</span> &#8801; <span style="color: #0000cd;">x</span>
<span style="color: #0000cd;">definition</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org65490dc" class="outline-2">
<h2 id="org65490dc"><span class="section-number-2">2</span> Graph definitions</h2>
<div class="outline-text-2" id="text-2">
<p>
A ‘graph’ is just a parallel-pair of maps,
</p>
<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #cd6600;">record</span><span style="color: #228b22;"> Graph</span>&#8320; :<span style="color: #228b22;"> Set</span>&#8321; <span style="color: #cd6600;">where</span>
  <span style="color: #cd6600;">field</span>
   <span style="color: #228b22;"> V</span>   : <span style="color: #cd6600;">Set</span>
   <span style="color: #228b22;"> E</span>   : <span style="color: #cd6600;">Set</span>
    <span style="color: #0000cd;">src</span> :<span style="color: #228b22;"> E</span> &#8594;<span style="color: #228b22;"> V</span>
    <span style="color: #0000cd;">tgt</span> :<span style="color: #228b22;"> E</span> &#8594;<span style="color: #228b22;"> V</span>
</pre>
</div>
<p>
This of-course captures the usual notion of a set of nodes <code>V</code> and a set of directed and labelled
edges <code>E</code> where an edge <code>e</code> begins at <code>src e</code> and concludes at <code>tgt e</code>.
</p>

<p>
What is good about this definition is that it can be phrased in any category: <code>V</code> and <code>E</code> are
any two objects and <code>src, tgt</code> are a parallel pair of morphisms between them.
How wonderful! We can study notion of graphs in arbitrary categories!
&#x2014;this idea will be made clearer when categories and functors are formally introduced.
</p>

<p>
However, the notion of structure-preserving map between graphs, or ‘graph-map’ for short,
then becomes
</p>

<p>
<code>\McG\--&gt;</code>
</p>
<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #cd6600;">record</span> _&#119970;&#10230;&#8320;_<span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">G H</span> :<span style="color: #228b22;"> Graph</span>&#8320;<span style="color: #707183;">)</span> :<span style="color: #228b22;"> Set</span>&#8321; <span style="color: #cd6600;">where</span>
  <span style="color: #cd6600;">open</span><span style="color: #228b22;"> Graph</span>&#8320;
  <span style="color: #cd6600;">field</span>
    <span style="color: #0000cd;">vertex</span> :<span style="color: #228b22;"> V</span><span style="color: #707183;">(</span>G<span style="color: #707183;">)</span> &#8594;<span style="color: #228b22;"> V</span><span style="color: #707183;">(</span>H<span style="color: #707183;">)</span>
    <span style="color: #0000cd;">edge</span>   :<span style="color: #228b22;"> E</span><span style="color: #707183;">(</span>G<span style="color: #707183;">)</span> &#8594;<span style="color: #228b22;"> E</span><span style="color: #707183;">(</span>H<span style="color: #707183;">)</span>
    <span style="color: #0000cd;">src-preservation</span> : &#8704; <span style="color: #0000cd;">e</span> &#8594; <span style="color: #0000cd;">src</span><span style="color: #707183;">(</span>H<span style="color: #707183;">)</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">edge</span> <span style="color: #0000cd;">e</span><span style="color: #707183;">)</span> &#8801;  <span style="color: #0000cd;">vertex</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">src</span><span style="color: #7388d6;">(</span>G<span style="color: #7388d6;">)</span> <span style="color: #0000cd;">e</span><span style="color: #707183;">)</span>
    <span style="color: #0000cd;">tgt-preservation</span> : &#8704; <span style="color: #0000cd;">e</span> &#8594; <span style="color: #0000cd;">tgt</span><span style="color: #707183;">(</span>H<span style="color: #707183;">)</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">edge</span> <span style="color: #0000cd;">e</span><span style="color: #707183;">)</span> &#8801;  <span style="color: #0000cd;">vertex</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">tgt</span><span style="color: #7388d6;">(</span>G<span style="color: #7388d6;">)</span> <span style="color: #0000cd;">e</span><span style="color: #707183;">)</span>
</pre>
</div>

<p>
This is a bit problematic in that we have two proof obligations and at a first glance it is not
at all clear their motivation besides ‘‘structure-preserving’’.
</p>

<p>
However, our main is in graphs in usual type theory, and as such we can use a definition that is
equivalent in this domain: a graph is a
type <code>V</code> of vertices and a ‘type’ <code>v ⟶ v’</code> of edges for each pair of vertices <code>v , v’</code>.
</p>
<div class="org-src-container">
<pre class="src src-org-agda">-- &#8216;<span style="color: #0000cd;">small</span> <span style="color: #0000cd;">graphs</span>&#8217; , <span style="color: #0000cd;">since</span> <span style="color: #0000cd;">we</span> <span style="color: #0000cd;">are</span> <span style="color: #0000cd;">not</span> <span style="color: #cd6600;">using</span> <span style="color: #0000cd;">levels</span>
<span style="color: #cd6600;">record</span><span style="color: #228b22;"> Graph</span> :<span style="color: #228b22;"> Set</span>&#8321; <span style="color: #cd6600;">where</span>
  <span style="color: #cd6600;">field</span>
   <span style="color: #228b22;"> V</span>    : <span style="color: #cd6600;">Set</span>
    _&#10230;_ :<span style="color: #228b22;"> V</span> &#8594;<span style="color: #228b22;"> V</span> &#8594; <span style="color: #cd6600;">Set</span>
</pre>
</div>

<p>
Now the notion of graph-map, and the meaning of structure-preserving, come to the forefront:
</p>

<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #cd6600;">record</span><span style="color: #228b22;"> GraphMap </span><span style="color: #707183;">(</span><span style="color: #228b22;">G H</span> :<span style="color: #228b22;"> Graph</span><span style="color: #707183;">)</span> :<span style="color: #228b22;"> Set</span>&#8321; <span style="color: #cd6600;">where</span>    
    <span style="color: #cd6600;">private</span>
      <span style="color: #cd6600;">open</span><span style="color: #228b22;"> Graph</span> <span style="color: #cd6600;">using</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">V</span><span style="color: #707183;">)</span>
      _&#10230;<span style="color: #0000cd;">g_</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Graph</span>._&#10230;_<span style="color: #228b22;"> G</span>
      _&#10230;<span style="color: #0000cd;">h_</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Graph</span>._&#10230;_<span style="color: #228b22;"> H</span>
    <span style="color: #cd6600;">field</span>
      <span style="color: #0000cd;">ver</span>  :<span style="color: #228b22;"> V</span><span style="color: #707183;">(</span>G<span style="color: #707183;">)</span> &#8594;<span style="color: #228b22;"> V</span><span style="color: #707183;">(</span>H<span style="color: #707183;">)</span>                                   -- <span style="color: #0000cd;">vertex</span> <span style="color: #0000cd;">morphism</span>
      <span style="color: #0000cd;">edge</span> : <span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> :<span style="color: #228b22;"> V</span><span style="color: #7388d6;">(</span>G<span style="color: #7388d6;">)</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #707183;">(</span><span style="color: #0000cd;">x</span> &#10230;<span style="color: #0000cd;">g</span> <span style="color: #0000cd;">y</span><span style="color: #707183;">)</span> &#8594; <span style="color: #707183;">(</span><span style="color: #0000cd;">ver</span> <span style="color: #0000cd;">x</span> &#10230;<span style="color: #0000cd;">h</span> <span style="color: #0000cd;">ver</span> <span style="color: #0000cd;">y</span><span style="color: #707183;">)</span> -- <span style="color: #0000cd;">arrow</span> <span style="color: #0000cd;">preservation</span>

<span style="color: #cd6600;">open</span><span style="color: #228b22;"> GraphMap</span>
</pre>
</div>

<p>
Note that <code>edge</code> essentially says that <code>mor</code> shifts, or translates, types
<code>x ⟶g y</code> into types <code>ver x ⟶h ver y</code>.
</p>

<p>
While equivalent, this two-piece definition is preferable over the four-piece one given
earlier since it means less proof-obligation and less constructions in general, but the same
expressiblity. Yay!
</p>

<p>
Before move on, let us give an example of a simple chain-graph.
For clarity, we present it in both variations.
</p>
<div class="org-src-container">
<pre class="src src-org-agda">-- <span style="color: #0000cd;">embedding</span>, ~<span style="color: #0000cd;">j</span> &lt; <span style="color: #0000cd;">n</span> &#8658; <span style="color: #0000cd;">j</span> &lt; <span style="color: #0000cd;">suc</span> <span style="color: #0000cd;">n</span>~
`_ : &#8704;<span style="color: #707183;">{</span><span style="color: #0000cd;">n</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Fin</span> <span style="color: #0000cd;">n</span> &#8594;<span style="color: #228b22;"> Fin</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">suc</span> <span style="color: #0000cd;">n</span><span style="color: #707183;">)</span>
` <span style="color: #0000cd;">j</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">inject</span>&#8804; <span style="color: #0000cd;">j</span> <span style="color: #707183;">(</span>&#8804;-<span style="color: #0000cd;">step</span> &#8804;-<span style="color: #0000cd;">refl</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">where</span> <span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Data.Nat.Properties</span> <span style="color: #cd6600;">using</span> <span style="color: #707183;">(</span>&#8804;-<span style="color: #0000cd;">step</span><span style="color: #707183;">)</span>
-- <span style="color: #0000cd;">this</span>' <span style="color: #0000cd;">an</span> <span style="color: #0000cd;">example</span> <span style="color: #0000cd;">of</span> <span style="color: #0000cd;">a</span> &#8216;<span style="color: #0000cd;">forgetful</span> <span style="color: #0000cd;">functor</span>&#8217;, <span style="color: #0000cd;">keep</span> <span style="color: #0000cd;">reading</span>!

<span style="color: #707183;">[</span>_<span style="color: #707183;">]</span>&#8320; : <span style="color: #228b22;">&#8469;</span> &#8594;<span style="color: #228b22;"> Graph</span>&#8320;
<span style="color: #707183;">[</span> <span style="color: #0000cd;">n</span> <span style="color: #707183;">]</span>&#8320; <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span><span style="color: #228b22;"> V</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Fin</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">suc</span> <span style="color: #0000cd;">n</span><span style="color: #7388d6;">)</span>      -- ~&#8776; <span style="color: #7388d6;">{</span><span style="color: #a020f0;">0</span>, <span style="color: #a020f0;">1</span>, ..., <span style="color: #0000cd;">n</span> - <span style="color: #a020f0;">1</span>, <span style="color: #0000cd;">n</span><span style="color: #88090B;">}</span>~
    ;<span style="color: #228b22;"> E</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Fin</span> <span style="color: #0000cd;">n</span>                        -- ~&#8776; <span style="color: #7388d6;">{</span><span style="color: #a020f0;">0</span>, <span style="color: #a020f0;">1</span>, ..., <span style="color: #0000cd;">n</span> - <span style="color: #a020f0;">1</span><span style="color: #88090B;">}</span>~
    ; <span style="color: #0000cd;">src</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">j</span> &#8594; ` <span style="color: #0000cd;">j</span>
    ; <span style="color: #0000cd;">tgt</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">j</span> &#8594; <span style="color: #0000cd;">fsuc</span> <span style="color: #0000cd;">j</span>
    <span style="color: #88090B;">}</span>
</pre>
</div>
<p>
That is, we have <code>(n+1)</code> vertices named <code>0, 1, …, n</code> and <code>n</code>-edges named <code>0, 1, …, n-1</code>
with one typing-axiom being <code>j : j ⟶ (j+1)</code>. Alternatively,
</p>

<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #707183;">[</span>_<span style="color: #707183;">]</span> : <span style="color: #228b22;">&#8469;</span> &#8594;<span style="color: #228b22;"> Graph</span>
<span style="color: #707183;">[</span> <span style="color: #0000cd;">n</span> <span style="color: #707183;">]</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>V <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Fin</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">suc</span> <span style="color: #0000cd;">n</span><span style="color: #7388d6;">)</span> ; _&#10230;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> &#8594; <span style="color: #0000cd;">fsuc</span> <span style="color: #0000cd;">x</span> &#8801; ` <span style="color: #0000cd;">y</span> <span style="color: #88090B;">}</span>
</pre>
</div>
</div>

<div id="outline-container-orgd9a27a9" class="outline-3">
<h3 id="orgd9a27a9"><span class="section-number-3">2.1</span> Signatures</h3>
<div class="outline-text-3" id="text-2-1">
<p>
A signature consists of sort symbols and function symbols each of which is associated source-sorts
and a target-sort.
A model or algebra of a language is an interpreation of the sort symbols as sets and function
symbols as functions between those sets
&#x2014;later you may note that instead of sets and functions we may use the objects and morphisms of
a fixed category instead, and so get a model in that category.
</p>

<p>
Formally, one sorted signatures are defined:
</p>
<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #cd6600;">open</span> <span style="color: #cd6600;">import</span> <span style="color: #a020f0;">Data.Vec</span> <span style="color: #cd6600;">using</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Vec</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">renaming</span> <span style="color: #707183;">(</span>_&#8759;_ <span style="color: #0000cd;">to</span> _,,_ ; <span style="color: #7388d6;">[]</span> <span style="color: #0000cd;">to</span> <span style="color: #0000cd;">nil</span><span style="color: #707183;">)</span> -- , <span style="color: #0000cd;">already</span> <span style="color: #cd6600;">in</span> <span style="color: #0000cd;">use</span> <span style="color: #0000cd;">for</span> <span style="color: #0000cd;">products</span> :/
  
-- <span style="color: #0000cd;">one</span> <span style="color: #0000cd;">sorted</span>
<span style="color: #cd6600;">record</span><span style="color: #228b22;"> Signature</span> : <span style="color: #cd6600;">Set</span> <span style="color: #cd6600;">where</span>
    <span style="color: #cd6600;">field</span>
     &#119977; : <span style="color: #228b22;">&#8469;</span> -- <span style="color: #0000cd;">how</span> <span style="color: #0000cd;">many</span> <span style="color: #0000cd;">there</span> <span style="color: #0000cd;">are</span>
     <span style="color: #0000cd;">ar</span> :<span style="color: #228b22;"> Vec</span> <span style="color: #228b22;">&#8469;</span> &#119977; -- <span style="color: #0000cd;">their</span> <span style="color: #0000cd;">arities</span>: <span style="color: #0000cd;">lookup</span> <span style="color: #0000cd;">i</span> <span style="color: #0000cd;">ar</span> == <span style="color: #0000cd;">arity</span> <span style="color: #0000cd;">of</span> <span style="color: #0000cd;">i-th</span> <span style="color: #0000cd;">function</span> <span style="color: #0000cd;">symbol</span>

<span style="color: #cd6600;">open</span><span style="color: #228b22;"> Signature</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>...<span style="color: #88090B;">}}</span> -- ~&#119977;~ <span style="color: #0000cd;">now</span> <span style="color: #0000cd;">refers</span> <span style="color: #0000cd;">to</span> <span style="color: #0000cd;">the</span> <span style="color: #0000cd;">number</span> <span style="color: #0000cd;">of</span> <span style="color: #0000cd;">function</span> <span style="color: #0000cd;">symbols</span> <span style="color: #cd6600;">in</span> <span style="color: #0000cd;">a</span> <span style="color: #0000cd;">signature</span>
</pre>
</div>

<p>
For example, the signature of monoids consists of a single sort symbol <code>C</code> (which can be
interpretted as the carrier of the monoid) and two function symbols <code>m , u</code>
(which can be interpreted as the monoid multiplication and unit) with source-target
sort lists <code>((),C) , ((C,C), C)</code> &#x2014;some would notate this by <code>u :→ C , m : C × C → C</code>.
</p>
<div class="org-src-container">
<pre class="src src-org-agda">M<span style="color: #0000cd;">onSig</span> :<span style="color: #228b22;"> Signature</span>
M<span style="color: #0000cd;">onSig</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> &#119977; <span style="color: #cd6600;">=</span> <span style="color: #a020f0;">2</span> ; <span style="color: #0000cd;">ar</span> <span style="color: #cd6600;">=</span> <span style="color: #a020f0;">0</span> ,, <span style="color: #a020f0;">2</span> ,, <span style="color: #0000cd;">nil</span> <span style="color: #88090B;">}</span>
-- <span style="color: #0000cd;">unit</span> ~<span style="color: #0000cd;">u</span> :<span style="color: #228b22;"> X</span>&#8304; &#8594;<span style="color: #228b22;"> X</span>~ <span style="color: #0000cd;">and</span> <span style="color: #0000cd;">multiplication</span> ~<span style="color: #0000cd;">m</span> :<span style="color: #228b22;"> X</span>&#178; &#8594;<span style="color: #228b22;"> X</span>~
</pre>
</div>


<p>
Generalising on monoids by typing the multiplication we obtain
the signature of categories: it consists of three sort symbols <code>O, A, C</code> (which can be
interepreted as objects, arrows, and composable pairs of arrows) and four function symbols
<code>⨾ , src, tgt, id</code> with source-target sort lists <code>(C,A) , (A,O) , (A,O) , (O,A)</code>
&#x2014;notice that only a language of symboll
has been declared without any properties besides those of typing. If we discard <code>C, ⨾, id</code> we
then obtain the signature of graphs. Without knowing what categories are, we have seen that their
signatures are similar to both the graph and monoid signatures and so expect their logicas to
also be similar.
</p>

<p>
A signature can be visualised in the plane by associting a dot for each sort symbol and an arrow
for each function symbols such that the arrow has a tail from each sort in the associated function
symbols source sorts list and the end of the arrow is the target sort of the sort symbol.
That is, a signature can be visualed as a hyper-graph.
</p>

<p>
A signature whose function symbols each have only one sort symbol for source-sorts is called a
‘graph signature’ since it corresponds to &#x2014;or can be visualised as&#x2014; a graph.
</p>

<p>
Then a model of a graph (signature) <code>𝒢</code> is an interpreation/realisation of the graph’s vertices
as sets and the graph’s edges as functions between said sets.
</p>

<p>
A model of <code>𝒢</code> is nothing more than a graph morphism
<code>𝒢 ⟶ 𝒮e𝓉𝒢𝓇𝒶𝓅𝒽</code>, where <code>𝒮e𝓉𝒢𝓇𝒶𝓅𝒽</code> is the graph with vertices sets and edges functions.
</p>

<p>
Notice that a graph is precicely a model of the graph <code>• ⇉ •</code> of two vertices and two edges from
the first to the second.
</p>
</div>
</div>
</div>

<div id="outline-container-org2d1c66f" class="outline-2">
<h2 id="org2d1c66f"><span class="section-number-2">3</span> Category Theory</h2>
<div class="outline-text-2" id="text-3">
<p>
In this section we introduce the notion of a ‘‘poor-man’s category’’ along with the notion of
structure preserving transformations and structure preserving transformations between such
transformations. The latter are known as \emph{natural transformations} and are considered one of
the most important pieces of the fundamentals of category theory; as such, we discuss them at
length. Afterwards, we relate this section back to our motivating discussion of graphs.
</p>
</div>

<div id="outline-container-orgb882ed2" class="outline-3">
<h3 id="orgb882ed2"><span class="section-number-3">3.1</span> Strict Categories</h3>
<div class="outline-text-3" id="text-3-1">
<p>
A category, like a monoid, is a a few types and operations for which some equations hold.
However, to discuss equations a notion of equality is needed and rather than enforce one
outright it is best to let it be given. This is a ‘set’ in constructive mathematics:
a type with an <code>E~quivalence relation on it ---also called a setoid or an ~E</code>-set.
However, then the structure must have a few added axioms: the operations must be congruences,
i.e., preserve the equivalence relation, and a structure-preserving map must also be a congruence.
</p>

<p>
For our purposes our we will use propositional equality and point-wise propositional equality,
and as such most of the proofs fall out of the fact that propositional equality is an equivalence.
However, this setoid structure becomes a bit of a noise and the issues of equivalences will be a
distraction from the prime focus. Instead, for our two cases where we use point-wise propositional,
we will postulate two forms of extensionality. Without question this is not a general approach
&#x2014;then again, our aim is not to develope a library for category theory, which has already been
done so elegantly by Kahl who calls it the
\href{http://relmics.mcmaster.ca/RATH-Agda/RATH-Agda-2.0.0.pdf}{RATH-Agda} project.
</p>

<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #0000cd;">mmodule</span> <span style="color: #a020f0;">_</span> <span style="color: #cd6600;">where</span> -- <span style="color: #0000cd;">category</span> <span style="color: #0000cd;">definitions</span>
    
 <span style="color: #cd6600;">record</span><span style="color: #228b22;"> Category</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> :<span style="color: #228b22;"> Level</span><span style="color: #88090B;">}</span> : <span style="color: #cd6600;">Set</span> <span style="color: #707183;">(</span>&#8467;<span style="color: #0000cd;">suc</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">where</span>
  <span style="color: #cd6600;">infixr</span> <span style="color: #a020f0;">10</span> _&#10814;_
  <span style="color: #cd6600;">field</span>
   <span style="color: #228b22;"> Obj</span>      : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">i</span>
    _&#10230;_     :<span style="color: #228b22;"> Obj</span> &#8594;<span style="color: #228b22;"> Obj</span> &#8594; <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">j</span>
    _&#10814;_      : &#8704;<span style="color: #707183;">{</span>A<span style="color: #228b22;"> B C</span> :<span style="color: #228b22;"> Obj</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span> &#8594;<span style="color: #228b22;"> B</span> &#10230;<span style="color: #228b22;"> C</span> &#8594;<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> C</span>
   <span style="color: #404040;"> as</span>soc    : &#8704;<span style="color: #707183;">{</span>A<span style="color: #228b22;"> B C D</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span><span style="color: #707183;">{</span><span style="color: #0000cd;">g</span> :<span style="color: #228b22;"> B</span> &#10230;<span style="color: #228b22;"> C</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">h</span> :<span style="color: #228b22;"> C</span> &#10230;<span style="color: #228b22;"> D</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #707183;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #707183;">)</span> &#10814; <span style="color: #0000cd;">h</span> &#8801; <span style="color: #0000cd;">f</span> &#10814; <span style="color: #707183;">(</span><span style="color: #0000cd;">g</span> &#10814; <span style="color: #0000cd;">h</span><span style="color: #707183;">)</span>
   <span style="color: #228b22;"> Id</span>       : &#8704;<span style="color: #707183;">{</span>A :<span style="color: #228b22;"> Obj</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> A</span>
    <span style="color: #0000cd;">leftId</span>   : &#8704; <span style="color: #707183;">{</span>A<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Id</span> &#10814; <span style="color: #0000cd;">f</span> &#8801; <span style="color: #0000cd;">f</span>
    <span style="color: #0000cd;">rightId</span>  : &#8704; <span style="color: #707183;">{</span>A<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">f</span> &#10814;<span style="color: #228b22;"> Id</span> &#8801; <span style="color: #0000cd;">f</span>

 <span style="color: #cd6600;">open</span><span style="color: #228b22;"> Category</span> <span style="color: #cd6600;">using</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Obj</span><span style="color: #707183;">)</span>
 <span style="color: #cd6600;">open</span><span style="color: #228b22;"> Category</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>...<span style="color: #88090B;">}}</span> <span style="color: #cd6600;">hiding</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Obj</span><span style="color: #707183;">)</span> -- <span style="color: #0000cd;">don</span>&#8217;<span style="color: #0000cd;">t</span> <span style="color: #0000cd;">want</span> <span style="color: #0000cd;">this</span> <span style="color: #0000cd;">to</span> <span style="color: #0000cd;">be</span> <span style="color: #cd6600;">public</span>, <span style="color: #0000cd;">since</span> --&gt; <span style="color: #0000cd;">also</span> <span style="color: #0000cd;">notates</span> <span style="color: #0000cd;">edges</span>
</pre>
</div>

<p>
However, similar to nearly everything else in this document, we can leave the setoid-approach as an excercise
for the reader, which of course has solutions being in the literate source.
%%
%% moved setoid-based theory to an appendix at the end, it seems I must enforce setoid structure at the outset
%% and I really do not think it is worth it for my intended purposes; moreover, it adds noise to the presentation without giving enough insight.
</p>

<p>
Moreover, lest you’re not convinced that my usage of extensionality is at all acceptable,
then note that others have used it to simplify their presentations; e.g.,
\href{http://cs.ioc.ee/~tarmo/papers/jfr14.pdf}{Relative monads formalised}.
Such ‘appeal to authority’ is for the lazy reader who dares not think for him or herself,
otherwise one ought to read up on the \href{https://ncatlab.org/nlab/show/principle+of+equivalence}{evils}
of using equality instead of equivalence relations so as to understand
\href{http://www.math.harvard.edu/~mazur/preprints/when_is_one.pdf}{when one thing is really another}.
</p>

<p>
The diligent reader may be interest to know that Maarten Fokkinga has written a very
\href{http://maartenfokkinga.github.io/utwente/mmf92b.pdf}{gentle introduction to category
theory using the calculational approach}; I highly recommend it!
</p>

<p>
In place of strict equality, one uses categorical isomorphism instead.
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #cd6600;">open</span><span style="color: #228b22;"> Category</span> <span style="color: #cd6600;">using</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Obj</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">public</span>
 
 <span style="color: #cd6600;">record</span><span style="color: #228b22;"> Iso</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}}</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">A B</span> :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #707183;">)</span> : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">j</span> <span style="color: #cd6600;">where</span>
   <span style="color: #cd6600;">field</span>
     <span style="color: #0000cd;">to</span>   :<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span>
     <span style="color: #0000cd;">from</span> :<span style="color: #228b22;"> B</span> &#10230;<span style="color: #228b22;"> A</span>
     <span style="color: #0000cd;">lid</span>  : <span style="color: #0000cd;">to</span> &#10814; <span style="color: #0000cd;">from</span> &#8801;<span style="color: #228b22;"> Id</span>
     <span style="color: #0000cd;">rid</span>  : <span style="color: #0000cd;">from</span> &#10814; <span style="color: #0000cd;">to</span> &#8801;<span style="color: #228b22;"> Id</span>
     
 <span style="color: #cd6600;">syntax</span><span style="color: #228b22;"> Iso</span> &#119966;<span style="color: #228b22;"> A B</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> A</span> &#8773;<span style="color: #228b22;"> B</span> <span style="color: #0000cd;">within</span> &#119966;
</pre>
</div>
</div>
</div>
<div id="outline-container-orgad98404" class="outline-3">
<h3 id="orgad98404"><span class="section-number-3">3.2</span> Familiar <code>𝒮e𝓉</code>-tings</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Let us give some elementary examples of the notion of a category to exhibit its ubiquity.
</p>
</div>

<div id="outline-container-orgd4c6991" class="outline-4">
<h4 id="orgd4c6991"><span class="section-number-4">3.2.1</span> 𝒮ℯ𝓉's</h4>
<div class="outline-text-4" id="text-3-2-1">
<p>
The collection of small (level 0) types and functions between them and usual function composition
with usual identity form a category and this is not at all difficult to see:
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #cd6600;">instance</span>
  &#119982;<span style="color: #0000cd;">e</span>&#120009; : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Category</span> <span style="color: #707183;">{</span>&#8467;<span style="color: #0000cd;">suc</span> <span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> -- <span style="color: #0000cd;">this</span> <span style="color: #0000cd;">is</span> <span style="color: #0000cd;">a</span> &#8216;<span style="color: #0000cd;">big</span>&#8217; <span style="color: #0000cd;">category</span>
  &#119982;<span style="color: #0000cd;">e</span>&#120009; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #228b22;"> Obj</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">i</span>
    ; _&#10230;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span><span style="color: #228b22;"> A B</span> &#8594;<span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">A</span> &#8594;<span style="color: #228b22;"> B</span><span style="color: #7388d6;">)</span>
    ; _&#10814;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> &#8594; <span style="color: #7388d6;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">x</span> &#8594; <span style="color: #0000cd;">g</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">f</span> <span style="color: #0000cd;">x</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>
    ;<span style="color: #404040;"> as</span>soc <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
    ;<span style="color: #228b22;"> Id</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">x</span> &#8594; <span style="color: #0000cd;">x</span>
    ; <span style="color: #0000cd;">leftId</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
    ; <span style="color: #0000cd;">rightId</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
    <span style="color: #88090B;">}</span>
</pre>
</div>
<p>
Sadly, this category is traditionally used to motivate constructions in arbitrary categories
and as such people usually thing of objects in an arbitrary category as nothing more than
sets with extra datum &#x2014;which is completely false.
</p>
</div>
</div>

<div id="outline-container-orgcbaf399" class="outline-4">
<h4 id="orgcbaf399"><span class="section-number-4">3.2.2</span> Sets are trivial categories</h4>
<div class="outline-text-4" id="text-3-2-2">
<p>
Recall that a type, or set, is nothing more than a specified collection of values.
</p>

<p>
Every set is also a category: there is an object for each element, the only morphisms are (formal)
identities, and composition is constantly the identity.
Some define a set to be a category with only identity morphisms; also called a
‘discrete category’ when one wants to distance themself from set theory ;)
&#x2014;less loosely, a discrete category over a type <code>S</code> has <code>Obj = S</code> and <code>(x ⟶ y) = (x ≡ y)</code>.
</p>

<p>
Discrete categories are quite an important space for \href{http://homotopytypetheory.org/}{hott}
people &#x2026; that’s right, attractive people are interested in these things.
</p>

<p>
Observe that all arrows are invertible! &#x2014;due to the symmetry of equality.
Categories with this property are known as \emph{groupoids}.
</p>
</div>
</div>

<div id="outline-container-org8098570" class="outline-4">
<h4 id="org8098570"><span class="section-number-4">3.2.3</span> Categories are typed monoids</h4>
<div class="outline-text-4" id="text-3-2-3">
<p>
Recall that a monoid <code>(M, ⊕, e)</code> is a type <code>M</code> with an associative operation <code>⊕ : M × M → M</code>
that has a unit <code>e</code>.
</p>

<p>
Every monoid is also a category: there is one object, call it <code>★</code>, the morphisms are the monoid
elements, and composition is the monoid operation. Some even define a monoid to be a one object
category. &#x2014;less loosely, for a monoid <code>(M, ⊕, e)</code> we take <code>Obj = {★} , _⟶_ = M</code>.
</p>

<p>
In fact, some would define a monoid to be a one-object category!
</p>
</div>
</div>

<div id="outline-container-orgbf3fa44" class="outline-4">
<h4 id="orgbf3fa44"><span class="section-number-4">3.2.4</span> Categories are coherently preordered sets</h4>
<div class="outline-text-4" id="text-3-2-4">
<p>
\href{http://www.cs.utexas.edu/~EWD/ewd11xx/EWD1102.PDF}{Recall} that a preordered set, or preset,
is a type <code>P</code> with a relation <code>≤</code> on it that satisfies ‘‘indirect inequality from above’’:
\[~
  ∀ x , y • x ≤ y ⇔ (∀ z • y ≤ z ⇒ x ≤ z)
~\]
&#x2014;equivalently, if it satisfies ‘‘indirect equality from below’’:
<code>∀ x , y • x ≤ y ⇔ (∀ z • z ≤ x ⇒ z ≤ y)</code>.
If we also have <code>∀ x , y • x ≤ y ∧ y ≤ x ⇒ x = y</code>, then we say <code>(P, ≤)</code> is a ‘poset’ or an
‘ordered set’.
</p>

<p>
Every (pre)ordered set is also a category: the objects are the elements, the morphisms are the order-relations, identities are the relfexitivity of <code>≤</code>, and composition is transitivity of <code>≤</code>.
</p>

<p>
Traditionally, classically, the relation <code>≤</code> is precicely a function <code>P × P ⟶ 𝔹 = {true, flase}</code>
and thus there is at-most one morphism between any two objects, and categories with this property
are called \emph{poset categories}.
</p>

<p>
In the constructive setting, the relation <code>≤</code> is typed <code>P × P → Set</code> and then
for a preset <code>(P, ≤)</code> we take <code>Obj = P, _⟶_ = a ≤ b</code> and insist
on ‘proof-irrelevance’ <code>∀ {a b} (p q : a ≤ b) → p ≡ q</code> so that there is at most one morphism
between any two objects.
The restriction is not needed if we were using actual categories-with-setoids since then we would
\emph{define} morphism equality to be <code>((a, b, p) ≈ (a’, b’, q) ) = (a ≡ a’ × b ≡ b’)</code>.
</p>

<p>
Observe that in the case we have a poset, every isomorphism is an equality:
\[
  ∀ x, y • x ≅ y ⇔ x ≡ y
\]
Categories with this property are called \emph{skeletal}.
Again, hott people like this; so much so, that they want it, more-or-less, to be a
\href{http://arxiv.org/abs/1302.4731}{foundational axiom}!
</p>

<p>
Poset categories are a wonderful and natural motivator for many constructions and definitions in
category theory. This idea is so broad-reaching that it would not be an exaggeration to think of
\href{http://www.cs.nott.ac.uk/~psarb2/papers/abstract.html#CatTheory}{categories as coherently constructive lattices}!
</p>
</div>
</div>

<div id="outline-container-orge04b22e" class="outline-4">
<h4 id="orge04b22e"><span class="section-number-4">3.2.5</span> Groupoids</h4>
<div class="outline-text-4" id="text-3-2-5">
<p>
Equivalence relations are relations that are symmetric, reflexive, and transitive.
Alternatively, they are preorder categories where every morphism is invertible &#x2014;this is the
symmetry property. But categories whose morphisms are invertible are groupoids!
</p>

<p>
Hence, groupoids can be thought of as generalized equivalence relations.
Better yet, as "constructive" equivalence relations: there might be more than one morphism/construction
witnessing the equivalence of two items.
</p>

<p>
Some insist that a "true set" is a type endowed with an equivalence relation, that is a setoid.
However, since groupoids generalize equivalence relations, others might insist on a true set to be
a "groupoid". However, in the constructive setting of dependent-type theory, these notions
coincide!
</p>
</div>
</div>

<div id="outline-container-orgc107c7d" class="outline-4">
<h4 id="orgc107c7d"><span class="section-number-4">3.2.6</span> Rule of Thumb</h4>
<div class="outline-text-4" id="text-3-2-6">
<p>
It’s been said that the aforementioned categories should be consulted whenever one learns a new
concept of category theory.
Indeed, these examples show that a category is a generalisation of a system of processes,
a system of compositionality, and an ordered system.
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-org370a152" class="outline-2">
<h2 id="org370a152"><span class="section-number-2">4</span> Functors</h2>
<div class="outline-text-2" id="text-4">
<p>
Now the notion of structure-preserving maps is just that of graphs but with attention to the algebraic
portions as well.
</p>

<p>
arr-in-cat : ∀{i j} (𝒞 : Category {i} {j}) (A B : Obj 𝒞) → Set j
arr-in-cat = Category._⟶_
infix -66 arr-in-cat
syntax arr-in-cat 𝒞 A B  =  A ⟶ B ∶ 𝒞 &#x2013; note the “ghost colon”
</p>

<p>
&#x2013; open Category {{&#x2026;}} hiding (Obj)
open Category using (Id)
</p>

<p>
&#x2013; ----------------------&#x2013;&#x2014;relocate above to be near cats defn -------------------------&#x2013;&#x2014;
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #cd6600;">record</span><span style="color: #228b22;"> Functor</span>&#8242; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">k</span> <span style="color: #0000cd;">l</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}}</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">k</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">l</span><span style="color: #88090B;">}}}</span> : <span style="color: #cd6600;">Set</span> <span style="color: #707183;">(</span>&#8467;<span style="color: #0000cd;">suc</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span> &#8845; <span style="color: #0000cd;">k</span> &#8845; <span style="color: #0000cd;">l</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">where</span>
  <span style="color: #cd6600;">field</span>
    -- <span style="color: #0000cd;">usual</span> <span style="color: #0000cd;">graph</span> <span style="color: #0000cd;">homomorphism</span> <span style="color: #0000cd;">structure</span>
    <span style="color: #0000cd;">obj</span>   :<span style="color: #228b22;"> Obj</span> &#119966; &#8594;<span style="color: #228b22;"> Obj</span> &#119967;                               -- <span style="color: #0000cd;">object</span> <span style="color: #0000cd;">map</span>
    <span style="color: #0000cd;">mor</span>   : &#8704;<span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">y</span> &#8594; <span style="color: #0000cd;">obj</span> <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">obj</span> <span style="color: #0000cd;">y</span>    -- <span style="color: #0000cd;">morphism</span> <span style="color: #0000cd;">preservation</span>
    -- <span style="color: #0000cd;">interaction</span> <span style="color: #cd6600;">with</span> <span style="color: #0000cd;">new</span> <span style="color: #0000cd;">algebraic</span> <span style="color: #0000cd;">structure</span>
    <span style="color: #0000cd;">id</span>    : &#8704;<span style="color: #707183;">{</span><span style="color: #0000cd;">x</span>   :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Id</span> <span style="color: #7388d6;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span><span style="color: #707183;">)</span> &#8801;<span style="color: #228b22;"> Id</span>       -- <span style="color: #0000cd;">identities</span> <span style="color: #0000cd;">preservation</span>
    <span style="color: #0000cd;">comp</span>  : &#8704;<span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> : <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">g</span> : <span style="color: #0000cd;">y</span> &#10230; <span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">mor</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #707183;">)</span> &#8801; <span style="color: #0000cd;">mor</span> <span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">mor</span> <span style="color: #0000cd;">g</span>  -- <span style="color: #0000cd;">composition</span> <span style="color: #0000cd;">preservation</span>

 <span style="color: #cd6600;">open</span><span style="color: #228b22;"> Functor</span>&#8242; <span style="color: #cd6600;">using</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">obj</span> ; <span style="color: #0000cd;">mor</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">public</span>

 -- <span style="color: #0000cd;">non</span> <span style="color: #cd6600;">instance</span> <span style="color: #0000cd;">variant</span>,
<span style="color: #228b22;"> Functor</span> : &#8704;<span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">k</span> <span style="color: #0000cd;">l</span><span style="color: #88090B;">}</span> <span style="color: #707183;">(</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span><span style="color: #707183;">)</span> <span style="color: #707183;">(</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">k</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">l</span><span style="color: #88090B;">}</span><span style="color: #707183;">)</span> &#8594; <span style="color: #cd6600;">Set</span> <span style="color: #707183;">(</span>&#8467;<span style="color: #0000cd;">suc</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span> &#8845; <span style="color: #0000cd;">k</span> &#8845; <span style="color: #0000cd;">l</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
<span style="color: #228b22;"> Functor</span> &#119966; &#119967; <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Functor</span>&#8242; <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119966; <span style="color: #cd6600;">=</span> &#119966;<span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}}</span>
</pre>
</div>
<p>
For a functor <code>F</code>, it is common practice to denote both <code>obj F</code> and <code>mor F</code> by <code>F</code> and this is usually
not an issue since we can use type inference to deduce which is meant. However, in the Agda formalization
we will continue to use the names <code>mor , obj</code>.
</p>

<p>
A functor can be thought of as endowing an object with some form of structure
&#x2014;since categories are intrinsically structureless in category theory&#x2014;
and so the morphism component of a functor can be thought of as preserving relations:
<code>f : a ⟶ b ⇒ F f : F a ⟶ F b</code> can be read as, ‘‘if <code>a</code> is related to <code>b</code> (as witnessed by <code>f</code>)
then their structured images are also related (as witness by <code>F f</code>)’’.
</p>
</div>

<div id="outline-container-org24a8f07" class="outline-3">
<h3 id="org24a8f07"><span class="section-number-3">4.1</span> Synonyms for Readability</h3>
<div class="outline-text-3" id="text-4-1">
<p>
While we’re close to the definition, let’s introduce some synonyms for readability
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #0000cd;">mmodule</span> <span style="color: #a020f0;">_</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">k</span> <span style="color: #0000cd;">l</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">k</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">l</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>F :<span style="color: #228b22;"> Functor</span> &#119966; &#119967;<span style="color: #88090B;">}</span> <span style="color: #cd6600;">where</span>
  <span style="color: #0000cd;">functors-preserve-composition</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Functor</span>&#8242;.<span style="color: #0000cd;">comp</span><span style="color: #228b22;"> F</span>
  <span style="color: #0000cd;">functors-preserve-identities</span>  <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Functor</span>&#8242;.<span style="color: #0000cd;">id</span><span style="color: #228b22;"> F</span>
</pre>
</div>
<p>
We make these as synonyms rather than names in the record since we do not want to use such lengthy
identifiers when realizing functor instances. The reason we do not make these synonyms in the
record but rather in a public dummy module is to make the functor in question found from the ambient
context (the <code>{{...}}</code>).
</p>

<p>
While we’re making synonyms for readability, let’s make another:
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> _<span style="color: #0000cd;">even-under_</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>A : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">a</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>B : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">b</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">x</span> &#8801; <span style="color: #0000cd;">y</span> &#8594; <span style="color: #707183;">(</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> A</span> &#8594;<span style="color: #228b22;"> B</span><span style="color: #707183;">)</span> &#8594; <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">x</span> &#8801; <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">y</span> 
 _<span style="color: #0000cd;">even-under_</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">eq</span> <span style="color: #0000cd;">f</span> &#8594; &#8801;-<span style="color: #0000cd;">cong</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">eq</span>
</pre>
</div>

<p>
An example usage is the proof <code>≡-cong (mor G) (id F) : mor G (mor F Id) ≡ mor G Id</code> can be
written more clearly as <code>functors-preserve-identities even-under (mor G)</code>, while longer it
is also self-documenting.
</p>
</div>
</div>

<div id="outline-container-org4e91491" class="outline-3">
<h3 id="org4e91491"><span class="section-number-3">4.2</span> Functor Conventions</h3>
<div class="outline-text-3" id="text-4-2">
<p>
In informal mathematics a functor <code>F = (obj , mor, preservation proofs)</code>
is usually presented as <i>F = (F₀, F₁) is a functor (exercise to reader)</i>.
</p>

<p>
“endo”-morphism is a morphism with the
same source and target, an “auto”-morphism
is an isomorphism with the same source and
target.
</p>

<p>
Say “co”-functor as short for “co”ntravariant
functor. Notice that the composition of
cofunctors is a covaraint functor &#x2014;cf the multiplication of negative numbers is a positive functor.
</p>
</div>
</div>

<div id="outline-container-org7cc10f8" class="outline-3">
<h3 id="org7cc10f8"><span class="section-number-3">4.3</span> Examples</h3>
<div class="outline-text-3" id="text-4-3">
<p>
A functor among monoids (as categories) is just a monoid homomorphism:
<code>(M, ⊕, e) ⟶ (N, ⊗, d) = Σ h ∶ M → N • ∀ x,y • h(x ⊕ y) = h x ⊗ h y ∧ h e = d</code>;
that is an identity and multiplication preserving function of the carriers.
Ny induction, <code>h</code> preserves all finite multiplications:
<code>h (⊕ i ∶ 1..n • xᵢ) = (⊗ i ∶ 1..n • h xᵢ)</code> where
<code>(★ i ∶ 1..n • yᵢ) ≔ e ★ y₁ ★ y₂ ⋯ ★ yₙ</code>.
More generally, functors preserve finite compositions: <code>F (⨾ i ∶ 1..n • fᵢ) = (⨾ i ∶ 1..n • F fᵢ)</code>
Cool beans :-)
</p>

<p>
A functor among poset categories is an order-preserving function.
</p>

<p>
A functor among discrete categories is just a function of the associated sets.
</p>

<p>
Two examples of functors from a poset (category) to a monoid (category).
</p>

<ul class="org-ul">
<li><code>monus : (ℕ, ≤) ⟶ (ℕ,+, 0)</code> is a functor defined on morphisms by
<code>i ≤ j ⇒ monus(i,j) ≔ j - i</code> and then the functor laws become
<code>i - i = 0</code> and <code>(k - j) + (j - i) = k - i</code>.</li>

<li><code>div : (ℕ⁺, ≤) → (ℚ, ×, 1)</code> is defined on morphisms by
<code>i ≤ j → div(i,j) ≔ j / i</code> and the functor laws become
<code>i / i = 1</code> and <code>(k / j) × (j / i) = k / i</code>.</li>
</ul>

<p>
Hey, these two seem alarmingly similar! What gives!
Well, they’re both functors from posets to monoids ;)
Also, they are instances of ‘residuated po-monoids’.
Non-commutative monoids may have not have a general inverse operation,
but instead might have left- and right- inverse operations known as residuals
&#x2014;we’ll mention this word again when discussing adjunctions and kan extensions.
Alternatively, they’re are instances of
\href{http://link.springer.com.libaccess.lib.mcmaster.ca/article/10.1007/s10773-004-7710-7}{‘(Kopka) Difference-posets’}.
</p>
</div>
</div>
</div>

<div id="outline-container-orgaa2a5d5" class="outline-2">
<h2 id="orgaa2a5d5"><span class="section-number-2">5</span> The four postulates of the apocalypse</h2>
<div class="outline-text-2" id="text-5">
<p>
Categories have objects and morphisms between them, functors are morphisms between categories,
and then we can go up another level and consider morphisms between functors.
These ‘level 2 morphisms’ are pretty cool, so let’s touch on them briefly.
</p>

<p>
Using posets as our guide,
We extend the ordering to monotone functions <code>f , g</code> pointwise
<code>f ≤̇ g ≔ (∀ x • f x ≤ g x)</code> and with posets as our guide, we extend the notion of morphism between
functors to be a ‘witness’ of these orderings <code>η : ∀ {X} → F X ⟶ G X</code>.
However, then for any morphism <code>f : A ⟶ B</code> we have two ways to get from <code>F A</code> to <code>G B</code> via
<code>F f ⨾ η {B}</code> and <code>η {A} ⨾ G f</code> and rather than choose one or the other, we request that they
are identical &#x2014;similar to the case of associtivity.
</p>
<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #228b22;"> NatTrans</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">i</span>&#8217; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span>  <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}}</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}}}</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">F G</span> :<span style="color: #228b22;"> Functor</span> &#119966; &#119967;<span style="color: #707183;">)</span> &#8594; <span style="color: #cd6600;">Set</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">j</span>&#8217; &#8845; <span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span><span style="color: #707183;">)</span>
<span style="color: #228b22;"> NatTrans</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119966; <span style="color: #cd6600;">=</span> &#119966;<span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}}</span><span style="color: #228b22;"> F G</span> <span style="color: #cd6600;">=</span>
   &#931; &#951; &#8758; <span style="color: #707183;">(</span>&#8704; <span style="color: #7388d6;">{</span>X :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> &#8594; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F X</span><span style="color: #7388d6;">)</span> &#10230; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">obj</span><span style="color: #228b22;"> G X</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span> &#8226; <span style="color: #707183;">(</span>&#8704; <span style="color: #7388d6;">{</span>A<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">f</span> &#10814; &#951; <span style="color: #7388d6;">{</span>B<span style="color: #88090B;">}</span> &#8801; &#951; <span style="color: #7388d6;">{</span>A<span style="color: #88090B;">}</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">f</span><span style="color: #707183;">)</span>
</pre>
</div>
<p>
The naturality condition is remembered by placing the target component <code>η {B}</code> \emph{after}
lifting <code>f</code> using the \emph{source} functor <code>F</code>;
likewise placing the source component \emph{before} applying the target functor.
</p>

<p>
Another way to remember it:
<code>η : F ⟶̇ G</code> starts at <code>F</code> and ends at <code>G</code>, so the naturaliry also starts with <code>F</code> and ends
with <code>G</code>: <code>F f ⨾ η {B} = η {A} ⨾ G f</code> :-)
</p>

<p>
It is at this junction that aforemenioed problem with our definition
of category comes to light: funnction equality is extensional and as such we cannot prove it.
Right now we have two function-like structures for which we will postulate a form of extensionality,
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> -- <span style="color: #0000cd;">function</span> <span style="color: #0000cd;">extensionality</span>
 <span style="color: #cd6600;">postulate</span> <span style="color: #0000cd;">extensionality</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>A : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>B :<span style="color: #228b22;"> A</span> &#8594; <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> : <span style="color: #7388d6;">(</span><span style="color: #0000cd;">a</span> :<span style="color: #228b22;"> A</span><span style="color: #7388d6;">)</span> &#8594;<span style="color: #228b22;"> B</span> <span style="color: #0000cd;">a</span><span style="color: #88090B;">}</span>
                          &#8594; <span style="color: #707183;">(</span>&#8704; <span style="color: #7388d6;">{</span><span style="color: #0000cd;">a</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">a</span> &#8801; <span style="color: #0000cd;">g</span> <span style="color: #0000cd;">a</span><span style="color: #707183;">)</span> &#8594; <span style="color: #0000cd;">f</span> &#8801; <span style="color: #0000cd;">g</span>

 -- <span style="color: #0000cd;">functor</span> <span style="color: #0000cd;">extensionality</span>
 <span style="color: #cd6600;">postulate</span> <span style="color: #0000cd;">funcext</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">k</span> <span style="color: #0000cd;">l</span><span style="color: #88090B;">}</span> <span style="color: #707183;">&#10627;</span> &#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">&#10628;</span> <span style="color: #707183;">&#10627;</span> &#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">k</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">l</span><span style="color: #88090B;">}</span> <span style="color: #707183;">&#10628;</span>
                     <span style="color: #707183;">{</span>F<span style="color: #228b22;"> G</span> :<span style="color: #228b22;"> Functor</span> &#119966; &#119967;<span style="color: #88090B;">}</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">oeq</span> : &#8704; <span style="color: #7388d6;">{</span><span style="color: #0000cd;">o</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">o</span> &#8801; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">o</span><span style="color: #707183;">)</span>
                     &#8594; <span style="color: #707183;">(</span>&#8704; <span style="color: #7388d6;">{</span>X<span style="color: #228b22;"> Y</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> X</span> &#10230;<span style="color: #228b22;"> Y</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">f</span>  &#8801;  &#8801;-<span style="color: #0000cd;">subst</span>&#8322;<span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Category</span>._&#10230;_ &#119967;<span style="color: #7388d6;">)</span> <span style="color: #0000cd;">oeq</span> <span style="color: #0000cd;">oeq</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">f</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
                     &#8594;<span style="color: #228b22;"> F</span> &#8801;<span style="color: #228b22;"> G</span>

 -- <span style="color: #0000cd;">graph</span> <span style="color: #0000cd;">map</span> <span style="color: #0000cd;">extensionality</span>
 <span style="color: #cd6600;">postulate</span> <span style="color: #0000cd;">graphmapext</span> : <span style="color: #707183;">{</span>G<span style="color: #228b22;"> H</span> :<span style="color: #228b22;"> Graph</span> <span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> :<span style="color: #228b22;"> GraphMap G H</span><span style="color: #88090B;">}</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">veq</span> : &#8704; <span style="color: #7388d6;">{</span><span style="color: #0000cd;">v</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">ver</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">v</span> &#8801; <span style="color: #0000cd;">ver</span> <span style="color: #0000cd;">g</span> <span style="color: #0000cd;">v</span><span style="color: #707183;">)</span>
                     &#8594; <span style="color: #707183;">(</span>&#8704; <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">e</span> :<span style="color: #228b22;"> Graph</span>._&#10230;_<span style="color: #228b22;"> G</span> <span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">edge</span> <span style="color: #0000cd;">g</span> <span style="color: #0000cd;">e</span> &#8801; &#8801;-<span style="color: #0000cd;">subst</span>&#8322;<span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Graph</span>._&#10230;_<span style="color: #228b22;"> H</span><span style="color: #7388d6;">)</span> <span style="color: #0000cd;">veq</span> <span style="color: #0000cd;">veq</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">edge</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">e</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
                     &#8594; <span style="color: #0000cd;">f</span> &#8801; <span style="color: #0000cd;">g</span>

 -- <span style="color: #0000cd;">natural</span> <span style="color: #0000cd;">transformation</span> <span style="color: #0000cd;">extensionality</span>
 <span style="color: #cd6600;">postulate</span> <span style="color: #0000cd;">nattransext</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">i</span>&#8217; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>F<span style="color: #228b22;"> G</span> :<span style="color: #228b22;"> Functor</span> &#119966; &#119967;<span style="color: #88090B;">}</span> <span style="color: #707183;">(</span>&#951; &#947; :<span style="color: #228b22;"> NatTrans F G</span><span style="color: #707183;">)</span>
                       &#8594; <span style="color: #707183;">(</span>&#8704; <span style="color: #7388d6;">{</span>X<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">proj</span>&#8321; &#951; <span style="color: #7388d6;">{</span>X<span style="color: #88090B;">}</span> &#8801; <span style="color: #0000cd;">proj</span>&#8321; &#947; <span style="color: #7388d6;">{</span>X<span style="color: #88090B;">}</span><span style="color: #707183;">)</span> -- <span style="color: #0000cd;">this</span> <span style="color: #0000cd;">is</span> <span style="color: #0000cd;">not</span> <span style="color: #0000cd;">enough</span> <span style="color: #0000cd;">to</span> <span style="color: #0000cd;">regain</span> ~&#951;,&#947;~
                       &#8594; &#951; &#8801; &#947;
</pre>
</div>

<p>
Natural transformations are too cool to end discussing so briefly
and so we go on to discuss their usage is mathematics later on.
</p>
</div>

<div id="outline-container-org3b0138b" class="outline-3">
<h3 id="org3b0138b"><span class="section-number-3">5.1</span> A very big <code>𝒞𝒶𝓉</code></h3>
<div class="outline-text-3" id="text-5-1">
<p>
With the notions of categories, functors, and extensionality in-hand we can now discus the
notion of the category of small categories and the category
of small graphs. Afterwards we give another example of a functor, say how every category can be construed as a
graph.
</p>

<p>
First the category of \emph{smaller} categories,
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #cd6600;">postulate</span> <span style="color: #0000cd;">magic</span> : &#8704;<span style="color: #707183;">{</span><span style="color: #0000cd;">a</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>A : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">a</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> A</span>
 <span style="color: #cd6600;">instance</span>
  &#119966;&#119990;&#120009; : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Category</span> <span style="color: #707183;">{</span>&#8467;<span style="color: #0000cd;">suc</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span><span style="color: #7388d6;">)</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#8467;<span style="color: #0000cd;">suc</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span><span style="color: #7388d6;">)</span><span style="color: #88090B;">}</span>
  &#119966;&#119990;&#120009; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #228b22;"> Obj</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span>
    ; _&#10230;_ <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Functor</span>
    ; _&#10814;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#8496;<span style="color: #88090B;">}</span><span style="color: #228b22;"> F G</span> &#8594;
        <span style="color: #cd6600;">let</span> <span style="color: #cd6600;">instance</span>
                   &#119966;&#8242; :<span style="color: #228b22;"> Category</span>
                   &#119966;&#8242; <span style="color: #cd6600;">=</span> &#119966;
                   &#119967;&#8242; :<span style="color: #228b22;"> Category</span>
                   &#119967;&#8242; <span style="color: #cd6600;">=</span> &#119967;  
                   &#8496;&#8242; :<span style="color: #228b22;"> Category</span>
                   &#8496;&#8242; <span style="color: #cd6600;">=</span> &#8496;
        <span style="color: #cd6600;">in</span>
        <span style="color: #cd6600;">record</span> <span style="color: #7388d6;">{</span>
          <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> &#10814; <span style="color: #0000cd;">obj</span> <span style="color: #909183;">{</span><span style="color: #709870;">{</span>&#119967;<span style="color: #88090B;">}}</span> <span style="color: #909183;">{</span><span style="color: #709870;">{</span>&#8496;<span style="color: #88090B;">}}</span><span style="color: #228b22;"> G</span>  -- <span style="color: #0000cd;">this</span> <span style="color: #0000cd;">compositon</span> <span style="color: #0000cd;">lives</span> <span style="color: #cd6600;">in</span> ~&#119982;<span style="color: #0000cd;">e</span>&#120009;~
        ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span>
        ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span>  <span style="color: #cd6600;">&#955;</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">begin</span>
              <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span><span style="color: #909183;">)</span><span style="color: #228b22;"> </span><span style="color: #909183;">(</span><span style="color: #228b22;">Id</span> <span style="color: #709870;">{</span><span style="color: #907373;">{</span>&#119966;<span style="color: #88090B;">}}</span> <span style="color: #709870;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span><span style="color: #909183;">)</span>
            &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #0000cd;">definition</span> <span style="color: #b22222;">{- </span><span style="color: #b22222;">of function composition </span><span style="color: #b22222;">-}</span> <span style="color: #909183;">&#10217;</span>
              <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #709870;">(</span><span style="color: #228b22;">Id</span> <span style="color: #907373;">&#10627;</span> &#119966; <span style="color: #907373;">&#10628;</span> <span style="color: #907373;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span><span style="color: #709870;">)</span><span style="color: #909183;">)</span>
            &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #0000cd;">functors-preserve-identities</span> <span style="color: #709870;">{</span>F <span style="color: #cd6600;">=</span><span style="color: #228b22;"> F</span><span style="color: #88090B;">}</span> <span style="color: #0000cd;">even-under</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span><span style="color: #709870;">)</span> <span style="color: #909183;">&#10217;</span>
              <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G </span><span style="color: #909183;">(</span><span style="color: #228b22;">Id</span> <span style="color: #709870;">&#10627;</span> &#119967; <span style="color: #709870;">&#10628;</span> <span style="color: #709870;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span><span style="color: #909183;">)</span>
            &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #0000cd;">functors-preserve-identities</span> <span style="color: #709870;">{</span>F <span style="color: #cd6600;">=</span><span style="color: #228b22;"> G</span><span style="color: #88090B;">}</span> <span style="color: #b22222;">{- </span><span style="color: #b22222;">and function composition </span><span style="color: #b22222;">-}</span> <span style="color: #909183;">&#10217;</span>
             <span style="color: #228b22;"> Id</span> <span style="color: #909183;">&#10627;</span> &#8496; <span style="color: #909183;">&#10628;</span> <span style="color: #909183;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> &#10814; <span style="color: #0000cd;">obj</span> <span style="color: #907373;">{</span><span style="color: #6276ba;">{</span>&#119967;<span style="color: #88090B;">}}</span> <span style="color: #907373;">{</span><span style="color: #6276ba;">{</span>&#8496;<span style="color: #88090B;">}}</span><span style="color: #228b22;"> G</span><span style="color: #709870;">)</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span>
            &#8718; 
        ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span><span style="color: #88090B;">}</span> &#8594;             
             <span style="color: #0000cd;">begin</span>
               <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span><span style="color: #909183;">)</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span>
             &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #0000cd;">definition</span> <span style="color: #b22222;">{- </span><span style="color: #b22222;">of function composition </span><span style="color: #b22222;">-}</span> <span style="color: #909183;">&#10217;</span>
               <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #709870;">)</span><span style="color: #909183;">)</span>
             &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">functors-preserve-composition</span> <span style="color: #907373;">{</span>F <span style="color: #cd6600;">=</span><span style="color: #228b22;"> F</span><span style="color: #88090B;">}</span><span style="color: #709870;">)</span> <span style="color: #0000cd;">even-under</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span><span style="color: #709870;">)</span> <span style="color: #909183;">&#10217;</span>
               <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span>
             &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #0000cd;">functors-preserve-composition</span> <span style="color: #709870;">{</span>F <span style="color: #cd6600;">=</span><span style="color: #228b22;"> G</span><span style="color: #88090B;">}</span> <span style="color: #b22222;">{- </span><span style="color: #b22222;">and function composition </span><span style="color: #b22222;">-}</span><span style="color: #909183;">&#10217;</span>
               <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span><span style="color: #909183;">)</span> <span style="color: #0000cd;">f</span> &#10814; <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span><span style="color: #909183;">)</span> <span style="color: #0000cd;">g</span>
             &#8718;
        <span style="color: #88090B;">}</span>
    ;<span style="color: #404040;"> as</span>soc <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span> <span style="color: #0000cd;">c</span> <span style="color: #0000cd;">d</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> <span style="color: #0000cd;">h</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">funcext</span> &#8801;-<span style="color: #0000cd;">refl</span> &#8801;-<span style="color: #0000cd;">refl</span>
    ;<span style="color: #228b22;"> Id</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #7388d6;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span> ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span> ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #88090B;">}</span>
    ; <span style="color: #0000cd;">leftId</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcext</span> &#8801;-<span style="color: #0000cd;">refl</span> &#8801;-<span style="color: #0000cd;">refl</span>
    ; <span style="color: #0000cd;">rightId</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcext</span> &#8801;-<span style="color: #0000cd;">refl</span> &#8801;-<span style="color: #0000cd;">refl</span>
    <span style="color: #88090B;">}</span>
</pre>
</div>

<p>
Some things to note,
</p>

<ul class="org-ul">
<li><p>
We could have written <code>id = ≡-cong (mor G) (id F) ⟨≡≡⟩ id G</code>, but this is not terribly clear what is going on.
Especially since we introduced categories not too long ago, we choose to elaborate the detail.
</p>

<p>
Likewise, <code>comp = (≡-cong (mor G) (comp F)) ⟨≡≡⟩ (comp G)</code>.
</p></li>

<li><code>assoc</code> is trivial since function composition is, by definition, associative.
Likewise <code>leftId, rightId</code> hold since functional identity is, by definition, unit of function composition.</li>

<li>The definition of composition immediately gives us that <code>obj , mor</code> distributes over composition:
<code>obj (F ⨾ G) = obj F ⨾ obj G</code> and <code>mor (F ⨾ G) = mor F ⨾ mor G</code>.</li>

<li><code>𝒞𝒶𝓉</code> is a category of kind <code>(ℓsuc m, ℓsuc m)</code>, where <code>m = i ⊍ j</code>, and its objects
are categories of kind <code>(i , j)</code> and so it is not an object of itself. Thank-you Russel and friends!
( You may proceed to snicker at the paradoxical and size issues encountered by those who use set theory. )
&#x2014;then again, I’ve never actually learned, nor even attempted to learn, any ‘‘formal set theory’’;
what I do know of set theory is usually couched in the language of type theory, I heart LADM!</li>
</ul>
</div>
</div>

<div id="outline-container-orgde37fe4" class="outline-3">
<h3 id="orgde37fe4"><span class="section-number-3">5.2</span> <code>𝒢𝓇𝒶𝓅𝒽</code></h3>
<div class="outline-text-3" id="text-5-2">
<p>
In a nearly identical way, just ignoring the algebraic datum, we can show that
<code>Graph</code>'s with <code>GraphMap</code>'s form a graph
</p>
<pre class="example">
  𝒢𝓇𝒶𝓅𝒽 : Category
  𝒢𝓇𝒶𝓅𝒽 = {! exercise !}
</pre>
</div>
</div>

<div id="outline-container-org3a52db0" class="outline-3">
<h3 id="org3a52db0"><span class="section-number-3">5.3</span> <code>𝒞𝒶𝓉</code>'s are <code>𝒢𝓇𝒶𝓅𝒽</code>'s</h3>
<div class="outline-text-3" id="text-5-3">
<p>
<i>Forgive and forget: the ~𝒰~nderlying functor</i>
</p>

<p>
Let’s formalize what we meant earlier when we said graphs are categories but ignoring the algebraic
data.
</p>

<p>
Given a category, we ignore the algebraic structure to obtain a graph,
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> &#119984;&#8320; :<span style="color: #228b22;"> Category</span> &#8594;<span style="color: #228b22;"> Graph</span>
 &#119984;&#8320; &#119966; <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span><span style="color: #228b22;"> V</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Obj</span> &#119966; ; _&#10230;_ <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Category</span>._&#10230;_ &#119966; <span style="color: #88090B;">}</span>
</pre>
</div>

<p>
Likewise, given a functor we ‘forget’ the property that the map of morphisms needs to preserve all
finite compositions to obtain a graph map:
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> &#119984;&#8321; : <span style="color: #707183;">&#10627;</span> &#119966; &#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #707183;">&#10628;</span> &#8594; &#119966; &#10230; &#119967; &#8594; &#119984;&#8320; &#119966; &#10230; &#119984;&#8320; &#119967;
 &#119984;&#8321;<span style="color: #228b22;"> F</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">ver</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> ; <span style="color: #0000cd;">edge</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #88090B;">}</span>
</pre>
</div>
<p>
This says that <code>𝒰₁</code> turns <code>ver, edge</code> into <code>obj , mor</code>,
<code>𝒰₁ ⨾ ver  ≡ obj</code> and <code>𝒰₁ ⨾ edge ≡ mor</code>, reassuring us that <code>𝒰₁</code> acts
as a bridge between the graph structures: <code>ver , edge</code> of graphs and
<code>obj , mor</code> of categories.
</p>

<p>
Putting this together, we obtain a functor.
</p>
<div class="org-src-container">
<pre class="src src-org-agda">-- <span style="color: #0000cd;">underlying</span>/<span style="color: #0000cd;">forgetful</span> <span style="color: #0000cd;">functor</span>: <span style="color: #0000cd;">every</span> <span style="color: #0000cd;">category</span> <span style="color: #0000cd;">is</span> <span style="color: #0000cd;">a</span> <span style="color: #0000cd;">graph</span>
 &#119984; :<span style="color: #228b22;"> Functor</span> &#119966;&#119990;&#120009; &#119970;&#120007;&#119990;&#120005;&#119997;
 &#119984; <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> &#119984;&#8320; ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> &#119984;&#8321; ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #88090B;">}</span>
</pre>
</div>
<p>
We forget about the extra algebraic structure of a category and of a functor to
arrive at a graph and graph-map, clearly such ‘forgetfullness’ preserves identities
and composition since it does not affect them at all!
</p>

<p>
Those familiar with category theory may exclaim that just as I have mentioned
the names ‘underlying functor’ and ‘forgetful functor’ I ought to mention
‘stripping functor’ as it is just as valid since it brings about connotations of
‘stripping away’ extra structure.
I’m assuming the latter is less popular due to its usage for
poor mathematical jokes and puns.
</p>

<p>
Before we move on, the curious might wonder if ‘‘categories are graphs’’ then what is the analgoue to
‘‘\(X\) are hypergraphs’’, it is \href{http://arxiv.org/PS_cache/math/pdf/0305/0305049v1.pdf#page=178}{multicategories}.
</p>

<p>
The remainder of this part of these notes is to build-up the material needed to realize the notion of ‘forgetful’.
</p>
</div>
</div>
</div>

<div id="outline-container-orgb4cdb2e" class="outline-2">
<h2 id="orgb4cdb2e"><span class="section-number-2">6</span> Natural Transformations</h2>
<div class="outline-text-2" id="text-6">
<p>
Recall, that a natural transformation <code>η : F ⟶ G</code> is a family
<code>∀ {X : Obj 𝒞} → F X ⟶ G X</code> that satisfies the naturality condition:
<code>∀ {A B} {f : A ⟶ B} → F f ⨾ η {B} ≡ η {A} ⨾ G f</code>. Let us look at this from a few different
angles; in particular,
\href{http://mathoverflow.net/questions/56938/what-does-the-adjective-natural-actually-mean/56956}{what does the adjective ‘natural’ actually mean?} It’s been discussed on many forums and we collect
a few of the key points here.
</p>
</div>

<div id="outline-container-orgf3fb9cd" class="outline-3">
<h3 id="orgf3fb9cd"><span class="section-number-3">6.1</span> naturality is identity of possible paths; or contraction of choices</h3>
<div class="outline-text-3" id="text-6-1">
<p>
Given two functors <code>F , G</code>, for any object <code>x</code> we obtain two objects <code>F x, G x</code> and so a morphism
from <code>F</code> to <code>G</code> ought to map such <code>F x</code> to <code>G x</code>. That is, a morphsim of functors is a family
<code>η : ∀ {x : Obj} → F x ⟶ G x</code>. Now for any <code>f : a → b</code> there are two ways to form a morphism
<code>F a → G b</code>: <code>F f ⨾ η {b}</code> and <code>η {a} ⨾ G f</code>. Rather than make a choice each time we want such
a morphism, we eliminate the choice all together by insisting that they are identical.
This is the naturality condition.
</p>

<p>
This is similar to when we are given three morphisms <code>f : a → b , g : b → c , h : c → d</code>,
then there are two ways to form a morphism <code>a → d</code>: <code>(f ⨾ g) ⨾ h</code> and <code>f ⨾ (g ⨾ h)</code>.
Rather than make a choice each time we want such a morphism, we eliminate the choice all together
by insisting that they are identical. This is the associativity condition for categories.
</p>

<p>
Notice that if there’s no morphism <code>F x ⟶ G x</code> for some <code>x</code>, they by definition there’s no
natural transformation <code>F ⟶̇ G</code>.
</p>
</div>
</div>

<div id="outline-container-org672878d" class="outline-3">
<h3 id="org672878d"><span class="section-number-3">6.2</span> No Choice</h3>
<div class="outline-text-3" id="text-6-2">
<p>
\[ ~"the natural X"
  = "the X which requires no arbitrary choices"
  = "the canonical/standard X"~
\]  
</p>

<p>
That is,
</p>
<pre class="example">
  it is a natural construction/choice
=
  distinct people would arrive at the same construction;
  (no arbitrary choice or cleverness needed)
=  
  there is actually no choice, (ie only one possiility), and so
  two people are expected to arrive at the same ‘choice’
</pre>

<p>
Thus, if a construction every involves having to decide between distinct routes, then chances are
the result is not formally natural.
</p>

<p>
\href{http://math.stackexchange.com/questions/939404/do-natural-transformations-make-god-given-precise?rq=1}{Some would even say}: "natural" = "God-given".
</p>
</div>
</div>

<div id="outline-container-orgcab7bbe" class="outline-3">
<h3 id="orgcab7bbe"><span class="section-number-3">6.3</span> Expected</h3>
<div class="outline-text-3" id="text-6-3">
<p>
"natural" = "resonable or expected in the ambient context" ; sometimes this ‘inution’ is developed
from working in a field for some time. Sometimes it just "feels" natural.
</p>
</div>
</div>

<div id="outline-container-org9a888c1" class="outline-3">
<h3 id="org9a888c1"><span class="section-number-3">6.4</span> Common Properties</h3>
<div class="outline-text-3" id="text-6-4">
<p>
"natural solution" = "has properties of all other solutions"
</p>

<p>
[To consider: is a natural solution then just an initial solution? That is, an intial
transformation?]
</p>

<p>
{\sc add this to todo’s list}
</p>
</div>
</div>

<div id="outline-container-org0a03782" class="outline-3">
<h3 id="org0a03782"><span class="section-number-3">6.5</span> natural means polymorphic without type inspection</h3>
<div class="outline-text-3" id="text-6-5">
<p>
A natural transformation can be thought of as a polymorphic function
<code>∀ {X} → F X ⟶ G X</code> \emph{where} we restrict ourselves to avoid inspecting any <code>X</code>.
</p>

<p>
Recall that a ‘~mono~morphic’ operation makes no use of type variables in its signature,
whereas a ‘~poly~morphic’ operation uses type variables in its signature.
</p>

<p>
Inspecting type parameters or not leads to the distinction of ad hoc plymorphism vs. parametric
polymorphism &#x2014;the later is the kind of polymorphism employed in functional language like Haskell
and friends ans so such functions are natural transformations by default!
\href{http://ecee.colorado.edu/ecen5533/fall11/reading/free.pdf}{Theorems for free!}
</p>

<p>
For example,
</p>
<pre class="example">
size : ∀ {X} → List X → 𝒦 ℕ X   -- where ~𝒦 x y ≔ Id {x}~ for morphisms and ~𝒦 x y ≔ x~ for objects
size [x₁, …, xₙ] = n
</pre>
<p>
is a polymorphic function and so naturality follows and is easily shown.
So we have always have
\[~List f ⨾ size = size~\] %% since <code>𝒦 ℕ f = Id</code>, then extensionality
and so <code>size : List ⟶̇ 𝒦</code>.
</p>
\begin{comment}
for any ~f : A ⟶ B~ we have
#+BEGIN_EXAMPLE org-agda
  (List f ⨾ size) [x₁, …, xₙ]
=
  size (List f [x₁, …, xₙ])
=
  size [f x₁, …, f xₙ]
=
  n
=
  Id n
=                  
  (𝒦 ℕ f) n
=  
  (𝒦 ℕ f) (size [x₁ , …, xₙ])
=  
  (size ⨾ 𝒦 ℕ f) [x₁, …, xₙ]
#+END_EXAMPLE
Hence, ~size : List ⟶̇ 𝒦~.
\end{comment}

<p>
On the other hand, the polymorphic function
</p>
<pre class="example">
whyme : ∀ {X} → List X → 𝒦 Int X
whyme {X} [x₁,…,xₙ] = If X = ℕ then 1729 else n
</pre>
<p>
is not natural: the needed equation <code>F f ⨾ η {B} = η {A} ⨾ G f</code>
for any <code>f : A → B</code> breaks as witnessed by
<code>f = (λ x → 0) : ℝ → ℕ</code> and any list with length <code>n ≠ 1729</code>,
and this is easily shown.
</p>
\begin{comment}
#+BEGIN_EXAMPLE org-agda
  (List f ⨾ whyme) [x₁, …, xₙ]
=
  whyme (List f [x₁, …, xₙ])
=
  whyme [f x₁, …, f xₙ]
=
  if ℕ = ℕ then 1729 else n
=
  1729
≠
  n
=  
  if ℝ = ℕ then 1729 else n
=
  (𝒦 ℕ f) (whyme [x₁, …, xₙ])
=
  (whyme ⨾ 𝒦 Int f) [x₁, …, xₙ]
#+END_EXAMPLE
\end{comment}

<p>
One might exclaim, ‘‘hey! this only works ’cuz you’re using Ramanujan’s taxi-cab number!
1729 is the smallest number expressible as a sum of 2 cubes in 2 ways:
<code>1729 = 12³ + 1³ = 10³ + 9 ³</code>.’’ I assure you that this is not the reason that naturality breaks,
and I commend you on your keen observation.
</p>

<p>
Notice that it is natural if we exclude the type inspected, <code>ℕ</code>.
That is, if we only consider <code>f : A → B</code> with <code>A ≠ ℕ ≠ B</code>.
In general, is it the case that a transformation can be made natural by excluding
the types that were inspected?
</p>

<p>
Before we move on, obverse that a solution in <code>h</code> to the absorptive-equation <code>F f ⨾ h = h</code>
is precisely a natural transformation from <code>F</code> to a diagonal functor.
\[~F f ⨾ h = h ⇔ Σ X : Obj • h ∈ F ⟶̇ 𝒦 X ~\]
where <code>(x ∈ Σ y ∶ Y • P y) =  (Σ y ∶ Y • y ≡ x ∧ P y)</code>.
</p>

<p>
{\sc add to todo’s: formalize <code>∈</code>; trickier than it looks ;) }
</p>

<p>
In particular, since <code>g ⨾ (λ _ → e) = (λ x → (λ _ → e) (g x) ) = (λ x → e)</code>
that is <code>g ⨾ K e = K e</code>, we have that
\[~∀ {F} {X} {e : X} → (K e) ∈ F ⟶̇ 𝒦 X~\]
Is the converse also true? If <code>h ∈ F ⟶̇ 𝒦 X</code> then <code>h = K e</code> for some <code>e</code>?
</p>
</div>
</div>

<div id="outline-container-org5e1fec9" class="outline-3">
<h3 id="org5e1fec9"><span class="section-number-3">6.6</span> comment-out monomorphic funcs are natural</h3>
<div class="outline-text-3" id="text-6-6">
<p>
Notice that that monomorphic functions are always natural!
</p>

<p>
Given <code>m : X → Y</code> we can consture this as <code>m : ∀ {Z} → 𝒦 X Z → 𝒦 Y Z</code> and then we obtain
naturality: given <code>f : A → B</code>,
</p>
<pre class="example">
  m ⨾ 𝒦 X f
= m ⨾ Id
= m
= Id ⨾ m
= 𝒦 Y f ⨾ m
</pre>

<p>
this is probably less insightful, and probably a damaging observation&#x2026;
</p>
</div>
</div>

<div id="outline-container-orgb1f10ce" class="outline-3">
<h3 id="orgb1f10ce"><span class="section-number-3">6.7</span> natural means no reference to types</h3>
<div class="outline-text-3" id="text-6-7">
<p>
The idea that a natural transformation cannot make reference to the type variable at all can be
seen by yet another example.
</p>

<pre class="example">
  data 𝟙 : Set where ★ : 𝟙

  -- a choice function: for any type X, it yields an argument of that type
  postulate ε : (X : Set) → X

  nay : ∀ {X} → X → X
  nay {X} _ = ε X
</pre>

<p>
Now nautrality <code>Id f ⨾ nay {B} = nay {A} ⨾ Id f</code> breaks as witnessed by
<code>f = (λ _ → εℕ + 1) : 𝟙 → ℕ</code>.
</p>

<p>
begin{comment}
</p>
<pre class="example">
  Id f ⨾ nay {ℕ}
=
  f ⨾ (λ _ → ε ℕ)
=
  λ _ → ε ℕ
≠
  λ _ → ε ℕ + 1
=
  λ _ → f (ε 𝟙)
=
  nay {𝟙} ⨾ Id f
</pre>
<p>
end{comment}
</p>

<p>
From this we may hazard the following:
if we have natural transformations <code>ηᵢ : ∀ {X : Objᵢ} → F X ⟶ G X</code>
where the <code>Objᵢ</code> partition the objects available &#x2014;ie, <code>Obj = Σ i • Objᵢ</code>&#x2014;
then the transformation <code>η {(i, X)} = ηᵢ</code> is generally unnatural since it clearly makes choices,
for each partition.
</p>
</div>
</div>

<div id="outline-container-org04e4c39" class="outline-3">
<h3 id="org04e4c39"><span class="section-number-3">6.8</span> natural means uniformaly and simultaneously defined</h3>
<div class="outline-text-3" id="text-6-8">
<p>
A family of morphisms is ‘natural in x’ precisely when it is defined
\emph{simultaneously} for all <code>x</code> &#x2014;there is no inspection of some particular x here and there,
no it is uniform! With this view, the naturality condition is thought of as a ‘simultaneity’
condition. \href{https://www.google.ca/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8&client=ubuntu#q=general%20theory%20of%20natural%20equivalences}{[Rephrasing GToNE]}
</p>

<p>
The idea of naturality as uniformly-definable is pursued by
\href{http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.107.2336&rep=rep1&type=pdf}{Hodges and Shelah}.
</p>
</div>
</div>

<div id="outline-container-org0567b62" class="outline-3">
<h3 id="org0567b62"><span class="section-number-3">6.9</span> naturality is restructure-modify commutativity</h3>
<div class="outline-text-3" id="text-6-9">
<p>
Recall that a functor can be thought of as endowing an object with structure.
Then a transformation can be thought of as a restructuring operation and naturality means
that it doesn’t matter whether we restructure or modify first, as long as we do both.
</p>
</div>
</div>

<div id="outline-container-org100174a" class="outline-3">
<h3 id="org100174a"><span class="section-number-3">6.10</span> natural means obvious</h3>
<div class="outline-text-3" id="text-6-10">
<p>
It may help to think of ‘‘there’s a natural transformation from F to G’’ to mean
‘‘there’s an obvious/standard/canconical way to transform F structure into G structure’’.
</p>

<p>
Likewise, ‘‘F is naturally isomorphic to G’’ may be read ‘‘F is obviously isomorphic to G’’.
</p>

<p>
Sometimes we can show ‘‘F X is isomorphic to G X, if we make a choice dependent on X’’
and so the isomorphism is not obvious, since a choice must be made.
</p>
</div>
</div>

<div id="outline-container-org6d4c3f1" class="outline-3">
<h3 id="org6d4c3f1"><span class="section-number-3">6.11</span> naturality is promotion</h3>
<div class="outline-text-3" id="text-6-11">
<p>
I think Richard Bird refers to the naturality condition as a promotion law where the functors
involved are thought of as (list) constructions.
</p>

<p>
The nomenclature is used 
\href{http://www.cs.ox.ac.uk/files/3390/PRG69.pdf}{‘‘to express the idea than operation on a compund structure can be ‘promoted’ into its componenets’.}
</p>

<p>
Reading <code>F f ⨾ η {B} = η {A} ⨾ G f</code> from left to right:
mapping f over the result of handling a complicated strucure is the same as mapping f over the
complex dataum than handling the result.
</p>

<p>
Lists give many examples of natural transformations by considering
\href{https://link.springer.com/chapter/10.1007/3-540-51305-1_24}{a categorical approach to the theory of lists}.
</p>
</div>
</div>

<div id="outline-container-orgf4981b4" class="outline-3">
<h3 id="orgf4981b4"><span class="section-number-3">6.12</span> naturality as a rewrite rule</h3>
<div class="outline-text-3" id="text-6-12">
<p>
The naturality condition can be seen as a rewrite rule that let’s us replace a complicated or
inefficient side with a simplier or more efficient yet equivalent expression.
I think I first learned this view of equations at the insistence of
\href{https://www.google.ca/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8&client=ubuntu#q=algebra%20of%20programming}{Richard Bird}.
</p>
</div>
</div>

<div id="outline-container-orgfb6d314" class="outline-3">
<h3 id="orgfb6d314"><span class="section-number-3">6.13</span> naturality is just model morphism</h3>
<div class="outline-text-3" id="text-6-13">
<p>
Given two functors <code>F,G : 𝒞 ⟶ 𝒟</code> let us construe them as only graph homomorphisms.
Then each is a model of the graph <code>𝒰₀ 𝒞</code> &#x2014;each intereprets the nodes and edges of <code>𝒰₀ 𝒞</code> as
actual objects and morphisms of <code>𝒟</code>&#x2014; and a natrual transformation is then nothing
more than a morphism of models.
</p>

<p>
{\sc was the notion of model morphisms mentioned earlier when
models were introduced?}
</p>
</div>
</div>

<div id="outline-container-org6499e15" class="outline-3">
<h3 id="org6499e15"><span class="section-number-3">6.14</span> naturality yields pattern matching</h3>
<div class="outline-text-3" id="text-6-14">
<p>
In the setting of types and functions, <code>η : F ⟶̇ G</code> means we have <code>η (F f x) = G f (η x)</code>
which when read left-to-right says that <code>η</code> is defined by pattern-matching on its argument
to obtain something of the form <code>F f x</code> then it is defined recursively by examining <code>x</code> and then
applying <code>G f</code> to the result &#x2014;of course there’s some base case <code>f</code> definitions as well.
</p>

<p>
Alternatively, the input to <code>η</code> is of the form <code>F …</code> and its
output is of the form <code>G …</code>.
</p>
</div>
</div>

<div id="outline-container-org007f73a" class="outline-3">
<h3 id="org007f73a"><span class="section-number-3">6.15</span> Example nat trans</h3>
<div class="outline-text-3" id="text-6-15">
<dl class="org-dl">
<dt>pointwise monotonicity</dt><dd>A functor among poset categories is an order-preserving function and a natural transformation
<code>f ⟶ g</code> is a proof that <code>f ≤ g</code> pointwise: <code>∀ x • f x ≤ g x</code> &#x2014;all the other pieces for a natural
 transformation are automatic from the definition of poset category.</dd>

<dt>conjugation</dt><dd><p>
  A functor among monoids (as categories) is just a monoid homomorphism:
\[~(M, ⊕, e) ⟶ (N, ⊗, d) ≔ Σ h ∶ M → N • ∀ x,y • h(x ⊕ y) = h x ⊗ h y ∧ h e = d~\]
A natural transformation <code>(f, prf) ⟶ (g, prf’)</code> is a point <code>n : N</code> with
<code>∀ x ∶ M • f x ⊗ n = n ⊗ g x</code>, a ‘conjugation’ by <code>n</code> that takes <code>f</code> to <code>g</code>.
</p>
<pre class="example">
  \begin{comment}
    η ∈ (f , prf) ⟶ (g , prf’)
  =                               { defn of natural transformation }
    η ∈ ∀ {x} → f x ⟶ g x in M
    with ∀ m • f m ⨾ η = η ⨾ g m
  =                               { arrows in monoid categories }
    η ∈ N with ∀ x ∶ M • f x ⨾ η = η ⨾ g x
  =                               { composition in monoid categories }
    η ∈ N with ∀ x ∶ M • f x ⊗ η = η ⊗ g x
  \end{comment}  
</pre></dd>

<dt>fold</dt><dd><p>
    Recall from the introduction <code>𝒰(S, ⊕, e) = S</code> was the underlying functor from monoids to sets.
Let <code>𝒰 × 𝒰</code> be the functor that for objects <code>M ↦ 𝒰 M × 𝒰 M</code> and for morphisms
<code>h ↦ λ (x,y) → (h x, h y)</code>. Then the monoid multiplication (of each monoid) is a natural
transformation <code>𝒰 × 𝒰 ⟶ 𝒰</code>, where naturality says that for any monoid homomorphism <code>h</code>, the
application of <code>𝒰 h</code> to the (monoid) multiplication of two elements is the same as the
(monoid) multiplication of the <code>𝒰 h</code>-images of the two elements, and this is evident from the
homomorphism condition.
</p>

<p>
Extending to finite products, <code>𝒱 ≔ Σ n ∶ ℕ • ∏ i ∶ 1..n • 𝒰</code>, the natural transformation
<code>𝒱 ⟶̇ 𝒰</code> is usually called fold, reduce, or cata and
<code>𝒱</code> is known as the
free monoid functor with notations <code>A* = List A = 𝒱 A</code>.
</p>

<p>
Loosely put,
</p>
<pre class="example">
    
    𝒱₀ : Monoid → Set
    𝒱₀ M = Σ n ∶ ℕ • ∏ i : 1..n • 𝒰 M -- finite sequences of elements from M
    
    𝒱₁ : ∀ {M N : Monoid} → (M ⟶ N) → 𝒱₀ M → 𝒱₀ N
    𝒱₁ (h , prf) = λ (n , x₁, …, xₙ) → (n , h x₁ , … , h xₙ)
    
    fold : ∀ {M : Monoid} → 𝒱₀ M → 𝒰₀ M
    fold {(M, ⊕, e)} = λ (n , x₁, …, xₙ) → x₁ ⊕ ⋯ ⊕ xₙ
</pre>

<p>
Now for any monoid homomorphism <code>h</code>, applying induction, yields
</p>
<pre class="example">
    h₀(x₁ ⊕ ⋯ ⊕ xₙ) = h₀ x₁ ⊕ ⋯ ⊕ h₀ xₙ where h₀ = 𝒰 (h₀, prf) = 𝒰 h
</pre>
<p>
which is just naturality
</p>
<pre class="example">
    𝒰 h ∘ fold {M} = fold {N} ∘ 𝒱 h
</pre></dd>

<dt>every operation in any multisorted algebraic structure gives a natural transformation</dt><dd><p>
   This is mentioned in the Barr-wells-ctcs category theory text, citing
[Linton,1969b], [Linton, 1969a].
</p>

<p>
For example, <code>src, tgt</code> &#x2014;from the graph signature&#x2014; give natural transformations
  <code>V ⟶ E</code> from the vertex functor to the edge functor <code>…</code>
</p></dd>

<dt>Representability</dt><dd><p>
   Recall that <code>V(G)</code> is essentially <code>ℙ₀ ⟶ G</code> where
<code>ℙₙ</code> is the graph of <code>n</code> edges on <code>n+1</code> vertices <code>0..n</code> with typing <code>i : i-1 ⟶ i</code>,
which I like to call ‘the path graph of length n’; and in particular <code>ℙ₀</code> is the the graph of
just one dot, called 0, and no edges. &#x2014;earlier I used the notation [n], but I’m using P since
I like the view point of paths.
</p>

<p>
What does it mean that ‘~V(G)~ is essentially ~ℙ₀ ⟶ G~’?
It means that the vertices functor
---<code>𝒱 : Graph ⟶ Set</code> takes objects <code>G ↦ V(G)</code> and morphisms <code>h ↦ ver h</code>&#x2014;
can be represented as the hom functor <code>(ℙ₀ ⟶_)</code>, that is to say
<code>𝒱 ≅ (ℙ₀ ⟶ _) within Func Graph Set</code> &#x2014;notice that we arrived at this expression by
quote-unqoute eta-reducing ‘~V(G)~ is essentially ~ℙ₀ ⟶ G~’ ;)
</p>

<p>
More generally, we have the functor <code>ℙₙ ⟶ _</code> which yields all paths of length n for a given
graph.
</p>

<p>
Observe that we also have an edges functor.
</p>

<p>
Recall the ‘untyped edges’, or arrows, <code>A(G) ≔ Σ x ∶ V(G) • Σ y ∶ V(G) • (x ⟶ y)</code>,
then (arrows) <code>𝒜 : Graph ⟶ Set</code> takes objects <code>G ↦ A(G)</code> and morphisms
<code>h ↦ λ (x,y,e) → (ver h x, ver h y, edge h e)</code>.
</p></dd>
</dl>
</div>
</div>
</div>

<div id="outline-container-org5a429fc" class="outline-2">
<h2 id="org5a429fc"><span class="section-number-2">7</span> <span class="todo TODO">TODO</span> Functor Categories</h2>
<div class="outline-text-2" id="text-7">
<p>
With a notion of morphisms between functors, one is led inexorably to ask
whether functors as objects and natural transformations as morphisms constitute
a category?
They do!
However, we leave their definition to the reader &#x2014;as usual, if the reader is ever so desperate
for solutions, they can be found as comments in the unruliness that is the source file.
</p>
<pre class="example">
  Func : ∀ {i j i’ j’} (𝒞 : Category {i} {j}) (𝒟 : Category {i’} {j’}) → Category
  Func 𝒞 𝒟 = {! exercise !}
</pre>

<p>
A hint: the identity natural transformation is the obvious way to get from <code>F X</code> to <code>F X</code>,
for any <code>X</code> given <code>F</code> &#x2014;well the only way to do so, without assuming anything else about the
functor <code>F</code>, is simply <code>Id {F X}</code>. This is the ‘natural’ choice, any other choice would be
‘unnatural’ as it would require some ‘cleverness’. Another hint: the obvious way to define
<code>η ⨾ γ</code> to get <code>F X ⟶ H X</code> from <code>F X ⟶ G X ⟶ H X</code> is composition of morphisms in the category!
That is, pointwise composition. Nothing ‘clever’, just using the obvious candidates!
</p>

<p>
begin{comment}
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #cd6600;">instance</span>
 <span style="color: #228b22;"> Func</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">i</span>&#8217; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #707183;">(</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span><span style="color: #707183;">)</span> <span style="color: #707183;">(</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span><span style="color: #707183;">)</span> &#8594;<span style="color: #228b22;"> Category</span> <span style="color: #707183;">{</span>&#8467;<span style="color: #0000cd;">suc</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span> &#8845; <span style="color: #0000cd;">i</span>&#8217; &#8845; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #7388d6;">)</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span>&#8217; &#8845; <span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span>
 <span style="color: #228b22;"> Func</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> &#119966; &#119967; <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #228b22;"> Obj</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Functor</span> &#119966; &#119967;
    ; _&#10230;_ <span style="color: #cd6600;">=</span><span style="color: #228b22;"> NatTrans</span>
    ; _&#10814;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>A<span style="color: #228b22;"> B C</span><span style="color: #88090B;">}</span> &#951; &#947; &#8594; <span style="color: #0000cd;">comp</span> <span style="color: #7388d6;">{</span>A<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>B<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>C<span style="color: #88090B;">}</span> &#951; &#947;
    ;<span style="color: #404040;"> as</span>soc <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>F<span style="color: #228b22;"> G H K</span> &#951; &#947; &#969;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">nattransext</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>K<span style="color: #88090B;">}</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">comp</span> <span style="color: #909183;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>H<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>K<span style="color: #88090B;">}</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">comp</span> <span style="color: #709870;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #709870;">{</span>G<span style="color: #88090B;">}</span> <span style="color: #709870;">{</span>H<span style="color: #88090B;">}</span> &#951; &#947;<span style="color: #909183;">)</span> &#969;<span style="color: #7388d6;">)</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">comp</span> <span style="color: #909183;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>G<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>K<span style="color: #88090B;">}</span> &#951; <span style="color: #909183;">(</span><span style="color: #0000cd;">comp</span> <span style="color: #709870;">{</span>G<span style="color: #88090B;">}</span> <span style="color: #709870;">{</span>H<span style="color: #88090B;">}</span> <span style="color: #709870;">{</span>K<span style="color: #88090B;">}</span> &#947; &#969;<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span><span style="color: #404040;"> as</span>soc
    ;<span style="color: #228b22;"> Id</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>F<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">iden</span><span style="color: #228b22;"> F</span>
    ; <span style="color: #0000cd;">leftId</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>F<span style="color: #228b22;"> G</span> &#951;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">nattransext</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>G<span style="color: #88090B;">}</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">comp</span> <span style="color: #909183;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>G<span style="color: #88090B;">}</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">iden</span><span style="color: #228b22;"> F</span><span style="color: #909183;">)</span> &#951;<span style="color: #7388d6;">)</span> &#951; <span style="color: #0000cd;">leftId</span>
    ; <span style="color: #0000cd;">rightId</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>F<span style="color: #228b22;"> G</span> &#951;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">nattransext</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>G<span style="color: #88090B;">}</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">comp</span> <span style="color: #909183;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>G<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>G<span style="color: #88090B;">}</span> &#951; <span style="color: #909183;">(</span><span style="color: #0000cd;">iden</span><span style="color: #228b22;"> G</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> &#951; <span style="color: #0000cd;">rightId</span>
    <span style="color: #88090B;">}</span>
    <span style="color: #cd6600;">where</span>
      <span style="color: #0000cd;">iden</span> :<span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">A</span> :<span style="color: #228b22;"> Functor</span> &#119966; &#119967;<span style="color: #707183;">)</span> &#8594;<span style="color: #228b22;"> NatTrans A A</span>
      <span style="color: #0000cd;">iden</span><span style="color: #228b22;"> A</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span> , <span style="color: #707183;">(</span><span style="color: #0000cd;">rightId</span> <span style="color: #7388d6;">&#10216;</span>&#8801;&#8801;<span style="color: #7388d6;">&#10217;</span> &#8801;-<span style="color: #0000cd;">sym</span> <span style="color: #0000cd;">leftId</span><span style="color: #707183;">)</span>

      <span style="color: #0000cd;">comp</span> : <span style="color: #707183;">{</span>A<span style="color: #228b22;"> B C</span> :<span style="color: #228b22;"> Functor</span> &#119966; &#119967;<span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> NatTrans A B</span> &#8594;<span style="color: #228b22;"> NatTrans B C</span> &#8594;<span style="color: #228b22;"> NatTrans A C</span>
      <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #707183;">{</span>F<span style="color: #228b22;"> G H</span><span style="color: #88090B;">}</span> &#951;<span style="color: #0000cd;">pf</span> &#947;<span style="color: #0000cd;">pf</span> &#8594; <span style="color: #cd6600;">let</span> <span style="color: #707183;">(</span>&#951; , <span style="color: #0000cd;">nat</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">=</span> &#951;<span style="color: #0000cd;">pf</span> ; <span style="color: #707183;">(</span>&#947; , <span style="color: #0000cd;">nat</span>&#8217;<span style="color: #707183;">)</span> <span style="color: #cd6600;">=</span> &#947;<span style="color: #0000cd;">pf</span> <span style="color: #cd6600;">in</span>
           <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>X<span style="color: #88090B;">}</span> &#8594; &#951; <span style="color: #7388d6;">{</span>X<span style="color: #88090B;">}</span> &#10814; &#947; <span style="color: #7388d6;">{</span>X<span style="color: #88090B;">}</span><span style="color: #707183;">)</span> , <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>A<span style="color: #228b22;"> B</span> <span style="color: #0000cd;">f</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">begin</span>
           <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">f</span> &#10814; &#951; <span style="color: #7388d6;">{</span>B<span style="color: #88090B;">}</span> &#10814; &#947; <span style="color: #7388d6;">{</span>B<span style="color: #88090B;">}</span>
          &#8801;<span style="color: #7388d6;">&#10216;</span> &#8801;-<span style="color: #0000cd;">sym</span><span style="color: #404040;"> as</span>soc <span style="color: #909183;">&#10216;</span>&#8801;&#8801;<span style="color: #909183;">&#10217;</span> <span style="color: #909183;">(</span>&#8801;-<span style="color: #0000cd;">cong</span>&#8322; _&#10814;_ <span style="color: #0000cd;">nat</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #709870;">&#10216;</span>&#8801;&#8801;<span style="color: #709870;">&#10217;</span><span style="color: #404040;"> as</span>soc<span style="color: #909183;">)</span> <span style="color: #7388d6;">&#10217;</span>
            &#951; <span style="color: #7388d6;">{</span>A<span style="color: #88090B;">}</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">f</span> &#10814; &#947; <span style="color: #7388d6;">{</span>B<span style="color: #88090B;">}</span>
          &#8801;<span style="color: #7388d6;">&#10216;</span> &#8801;-<span style="color: #0000cd;">cong</span>&#8322; _&#10814;_ &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #0000cd;">nat</span>&#8217; <span style="color: #909183;">&#10216;</span>&#8801;&#8801;<span style="color: #909183;">&#10217;</span> &#8801;-<span style="color: #0000cd;">sym</span><span style="color: #404040;"> as</span>soc <span style="color: #7388d6;">&#10217;</span>
            <span style="color: #7388d6;">(</span>&#951; <span style="color: #909183;">{</span>A<span style="color: #88090B;">}</span> &#10814; &#947; <span style="color: #909183;">{</span>A<span style="color: #88090B;">}</span><span style="color: #7388d6;">)</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> H</span> <span style="color: #0000cd;">f</span>
          &#8718;<span style="color: #707183;">)</span>
</pre>
</div>
<p>
end{comment}
This is a good exercise as it will show you that there is an identity functor and that composition of functors
is again a functor. Consequently, functors are in abundance: given any two, we can form new ones by composition.
</p>

<p>
It is a common construction that when a type <code>Y</code> is endowed with some structure, then we can endow
the function space <code>X → Y</code>, where <code>X</code> is any type, with the same structure and we do so
‘pointwise’. This idea is formalized by functor categories.
Alternatively, one can say we have ‘categorified’ the idea; where
\emph{categorification} is the process of replacing types and functions with categories and
functors and possibly adding some coherence laws.
</p>

<p>
There are people who adhere to something called ‘set theory’ which is essentialy type theory but
ignoring types, loosely put they work only with the datatype
</p>
<pre class="example">
data SET : Set where
  Elem : ∀ {A : Set} → A → SET
</pre>
<p>
Such heathens delegate types-of-types into ‘classes’ of ‘small’ and ‘big’ sets and it’s not
uniform enough for me.
Anyhow, such people would say that functor categories ‘‘cannot be constructed (as sets)’’ unless
one of the categories involved is ‘‘small’’. Such shenanigans is ignored due to the hierarchy of
types we are using :-)
</p>

<p>
We must admit that at times the usage of a single type, a ‘uni-typed theory’ if you will can be
used when one wants to relise types in an extrinsic fashion rather than think of data as
intrinsically typed. Everything has its place &#x2026; nonetheless, I prefer (multi)typed settings!
</p>
</div>

<div id="outline-container-orgd800d47" class="outline-3">
<h3 id="orgd800d47"><span class="section-number-3">7.1</span> examples of functor categories</h3>
<div class="outline-text-3" id="text-7-1">
<ul class="org-ul">
<li>Let <code>𝟙 ≔ [ • ]</code> be the discrete category of one object (and only the identity arrow on it).
Then <code>𝒞 ≅ Func 𝟙 𝒞</code>.</li>

<li><p>
For example,
let <code>𝟚₀ ≔ [• •]</code> be the discrete category of two objects.
Then square category can be defined <code>𝒞 ⊗ 𝒞 ∶≅ Func 𝟚₀ 𝒞</code>.
The subscript 0 is commonly used for matters associated with objects and
the name <code>𝟚₀</code> is suggestive of the category of 2 objects only.
</p>

<p>
More generally, if <code>𝒩</code> is the discrete category of <code>n</code> objects, then
the <code>n</code>-fold product category is defined
<code>(∏ i ∶ 1..n • 𝒞) ∶≅ Func 𝒩 𝒞</code>.
</p></li>

<li><p>
We can add an arrow to <code>𝟚₀</code> to obtain another category&#x2026;
</p>

<p>
Let <code>𝟚 ≔ • ⟶ •</code> be the category of two objects, call them 0 and 1, with one arrow between them.
Then a functor <code>𝟚 ⟶ 𝒞</code> is precisely a morphism of <code>𝒞</code> and a natural transformation
</p></li>
</ul>
<p>
~  f ⟶ g~ boils down to just a pair of morphisms <code>(h,k)</code> with <code>h ⨾ g = f ⨾ k</code>.
  Hence, ‘the arrow category of ~𝒞~’ is
  $\mathcal{C}<sup>\mathbb{2}</sup> := \mathcal{C}<sup>&rarr;</sup>
  $~≔ Func 𝟚 𝒞~:
  the category with objects being <code>𝒞</code>-morphisms and morphisms being ‘commutative squares’.
</p>

<p>
Notice that the notation \(\mathcal{C}^{\mathbb{2}}\) is an abbreviation for <code>Func 𝟚 𝒞</code> and
as such it is common to write <code>𝒳 ^ 𝒴 ≔ Func 𝒳 𝒴</code>.
</p>

<ul class="org-ul">
<li>It is a common heuristic that when one suspects the \emph{possibility} of a category <code>𝒞</code>, then one
can make probes to discover its structure. The objects are just functors <code>𝟙 ⟶ 𝒞</code> and the
morphisms are just functors <code>𝟚 ⟶ 𝒞</code>.</li>

<li><p>
The ‘‘category of presheaves of <code>𝒞~’’ is the category ~PSh 𝒞 ≔ Func (𝒞 ᵒᵖ) 𝒮e𝓉</code>.
</p>

<p>
This is a pretty awesome category since it allows nearly all constructions in <code>𝒮e𝓉</code> to be
realised! Such as subsets, truth values, and even powersets! All these extra goodies make it
a ‘‘topos’’ aka ‘‘power allegory’’ &#x2014;the first is a category that has all finite limits and
a notion of powerset while the second, besides the power part, looks like a totally different beast;
the exhilaration!
</p></li>

<li><p>
The ‘slice category’ of <code>𝒞</code> ‘over’ <code>B : Obj 𝒞</code> is the category
<code>𝒞 / B ≔ Σ F ∶ Func 𝟚 𝒞 • (F 1 = B)</code>. That is, the category of objects being <code>𝒞</code>-morphisms with
target <code>B</code> and morphisms <code>f ⟶ g</code> being <code>(h,k)</code> with <code>h ⨾ g = f ⨾ k</code> but a natural choice for
<code>k : B ⟶ B</code> is <code>Id</code> and so we can use morphism type <code>(f ⟶’ g) ≔ Σ h : src f ⟶ src g • h ⨾ g = f</code>.
This is seen by the observation <code>(h, k) ∈ f ⟶ g ⇔ h ∈ (f ⨾ k) ⟶’ g</code>; of course a formal
justification is obtained by showing <code>_⟶_ ≅ _⟶’_ within Func (𝒞 ᵒᵖ ⊗ 𝒞) 𝒮e𝓉</code>&#x2026;which I have
not done and so may be spouting gibberish!
</p>

<p>
begin{comment}
The isomorphism is witnessed as follows.
</p>

<p>
To :: <code>(h,k) : f ⟶ g ⇒ h : (f ⨾ k) ⟶’ g</code>,
</p>

<p>
from :: <code>h : f ⟶’ g ⇒ (h, Id) : f ⟶ g</code>.
</p>

<p>
Rid ::
</p>
<pre class="example">
        (h , k) : f ⟶ g
    ⇒  h : f ⨾ k ⟶’ g
    ⇒ (h, Id) : f ⨾ k ⟶ g
    ≡ (h , k) : f ⟶ g
</pre>
<p>
where the equivalence is just
</p></li>
</ul>
<p>
~    (h,k) ∈ f ⟶ g ⇔ (h , Id) ∈ (f ⨾ k) ⟶ g~.
</p>

<p>
Lid ::
</p>
<pre class="example">
       h : f ⟶’ g
    ⇒ (h, Id) : f ⟶ g
    ⇒ h : f ⨾ Id ⟶’ g
    ≡ h : f ⟶’ g
</pre>

<p>
Of course none of this is formal(ly in Agda) and so should be taken with great precaution!
&#x2014;since it may be all wrong!
end{comment}
</p>

<p>
    Just as the type <code>Σ x ∶ X • P x</code> can be included in the type <code>X</code>, by forgetting the second
    component, so too the category <code>Σ F ∶ 𝟚 ⟶ 𝒞 • F 1 ≈ B</code> can be included into the category
~    𝒞~ and we say it is a ‘subcategory’ of <code>𝒞</code>.
</p>

<p>
The notation <code>Σ o ∶ Obj 𝒞 • P o</code> defines the subcategory of <code>𝒞</code> obtained by deleting
all objects not satisfying <code>P</code> and deleting all morphisms incident to such objects; i.e.,
the category <code>𝒟</code> with
\[~Obj 𝒟 ≡ Σ o ∶ Obj 𝒞 • P o~    \text{ and }   ~(o , pf) ⟶𝒟 (o’ , pf’) ≡ o ⟶𝒞 o’~ \]
</p>

<p>
This is the largest/best/universal subcategory of <code>𝒞</code> whose objects satisfy <code>P</code>.
<br />
Formalize this via a universal property ;)
</p>

<ul class="org-ul">
<li><p>
Coslices of <code>𝒮e𝓉</code> are functor categories
</p>

<p>
 %% [fibres]
<code>Func S 𝒮e𝓉 ≅ 𝒮e𝓉 / S</code>, where S in the left is construed as a discrete category and in the right
 is construed as an object of <code>𝒮e𝓉</code>.
</p>

<p>
This is because a functor from a discrete category need only be a function of objects since
there are no non-identity morphisms. Then a functor <code>f : S ⟶ Set</code> yields an <code>S</code>-targeted
function <code>(Σ s ∶ S • f s) → S : (λ (s , X) → s)</code>. Conversely a function <code>g : X → S</code> yields
a functor <code>S ⟶ Set : (λ s → (Σ x ∶ X • g x ≡ s))</code>.
</p>

<p>
begin{comment}
[to]
Indeed a functor <code>f : S ⟶ Set</code> is determined by giving a set <code>f s</code> for each element <code>s ∈ S</code>
&#x2014;since there are no non-identity morphisms. But this is preceiscely a function <code>g</code> with target
<code>S</code>! Define <code>g : (Σ s • f s) → S</code> that given an element (s,x) returns s.
</p>

<p>
[from]
Conversley,
given a function <code>g : X → S</code> we have a functor <code>S ⟶ SET</code> determined by sending each element s
to its preimage under g: <code>g⁻¹{s} ≔ Σ x • g x ≈ s</code>, an object of SET.
</p>

<p>
Rid:
</p>
<pre class="example">
    given f : S ⟶ Set
    
      from (to f)
    = λ s → Σ x ∈ src(to f) • (to f) x ≈ s
    = λ s → Σ s’ ∈ S • Σ x’ ∈ f s’ • (to f) (s’, x’) ≈ s
    = λ s → Σ s’ ∈ S • Σ x’ ∈ f s’ • s’ ≈ s
    ≡⟨ one point rule ⟩
      λ s → Σ x’ ∈ f s • ⊤   where ⊤ short for ⊤rue
    = λ s → f s              top is unit for products
    = f
</pre>
<p>
some of those equlaities are clearly not equalities!
&#x2014;maybe simplified if we get rid of those <code>∈</code> and rephrase to use the word ‘type’ rather than
‘set’!
</p>

<p>
then the other inverse law&#x2026;
end{comment}
</p>

<p>
Because of this example, <code>𝒞 / B</code> can be thought of as ‘~𝒞~-objects indexed by ~B~’.
</p></li>

<li><p>
<b>Natural transformations as functor categories</b>
</p>

<p>
In a similar spirit, we can identify natural transformations as functors!
\[~Func 𝒞 (𝒟 ^ 𝟚) ≅ (Σ F , G ∶ 𝒞 ⟶ 𝒟 • NatTrans F G)~\]
</p>

<p>
A functor <code>N : 𝒞 ⟶ 𝒟 ^ 𝟚</code> gives, for each object <code>C : Obj 𝒞</code> an object in <code>𝒟 ^ 𝟚</code> which
is precisely an arrow in <code>𝒟</code>, type it as <code>N C : FC ⟶ GC</code> i.e., <code>FC = N C 0 , GC = N C 1</code>,
and for each arrow <code>f : A ⟶ B in 𝒞</code> we obtain an arrow <code>N f : N A ⟶ N B</code> in <code>𝒟 ^ 𝟚</code>
which is precisely a commutative square in <code>𝒟</code>,
that is a pair of <code>𝒟</code>-arrows <code>(Ff , Gf) = Nf</code> with <code>N A ⨾ Gf = Ff ⨾ N B</code>.
</p>

<p>
Extended the notation <code>Fx</code> of the previous paragraph to a functor <code>𝒞 ⟶ 𝒟</code> by <code>F x ≔ Fx</code>; likewise for <code>G</code>.
The object and morphism mappings are clear, but what about functoriality? We prove it for both <code>F, G</code> together.
</p>
\begin{multicols}{2}
#+BEGIN_EXAMPLE org-agda
Identity:

  (F Id , G Id)
≡⟨ definition of F and G ⟩
  N Id
≡⟨ N is a functor ⟩
  Id in 𝒟 ^ 𝟚
≡⟨ identity in arrow categories ⟩
  (Id , Id)
#+END_EXAMPLE
\columnbreak
#+BEGIN_EXAMPLE org-agda
Composition:

  ( F (f ⨾ g) , G (f ⨾ g) )
≡⟨ definition of F and G ⟩
  N (f ⨾ g)
≡⟨ N is a functor ⟩
  N f ⨾ N g
≡⟨ definition of F and G ⟩
  (Ff, Gf) ⨾ (Fg , Gg)
≡⟨ composition in arrow categories ⟩
  (Ff ⨾ Fg , Gf ⨾ Gg)
≡⟨ definition of F and G as notation ⟩
  (F f ⨾ F g , G f ⨾ G g)
#+END_EXAMPLE
\end{multicols}

<p>
Sweet!
</p>

<p>
Conversely, given a natural transformation <code>η : F ⟶ G</code>
we define a functor <code>N : 𝒞 ⟶ 𝒟 ^ 𝟚</code> by sending objects <code>C</code> to <code>η {C} : F C ⟶ G C</code>, which is an
object is <code>𝒟 ^ 𝟚</code>, and sending morphisms <code>f : A ⟶ B</code> to pairs <code>(G f , F f)</code>, which is a morphism
in <code>𝒟 ^ 𝟚</code> due to naturality of <code>η</code>: <code>η {A} ⨾ G f = F f ⨾ η {B}</code>. It remains to show that <code>N</code>
preserves identities and composition.
</p>

<p>
Now it remains to show that these two processes are inverses and the isomorphism claim is complete. Woah!
</p>

<p>
Similarly, we can show <code>Func (𝟚 ⊗ 𝒞) 𝒟 ≅ (Σ F₀ , F₁ ∶ 𝒞 ⟶ 𝒟 • NatTrans F₁ F₂)</code> by showing
the ‘‘the universal property of exponentiation’’ <code>𝒳 ⟶ (𝒵 ^ 𝒴) ≅ (𝒳 ⊗ 𝒴 ⟶ 𝒵</code>, or more
directly: to/from direction obtained by setting <code>H i = Fᵢ</code> on objects and likewise for morphisms
but with <code>H(Id, 1) = η</code> where <code>1 : 0 ⟶ 1</code> is the non-identity arrow of <code>𝟚</code>.
</p>

<p>
(Spoilers! Alternatively: <code>Arr (Func 𝒞 𝒟) ≅ 𝟚 ⟶ 𝒞 ^ 𝒟 ≅ 𝒞 × 𝟚 ⟶ 𝒟</code> since <code>𝒞𝒶𝓉</code> has exponentials,
and so the objects are isomorphic; i.e., natural transformations correspond to functors <code>𝒞×𝟚⟶𝒟</code>)
</p>

<p>
Why are we mentioning this alternative statement? Trivia knowledge of-course!
On a less relevant note, if you’re familiar with the theory of stretching-without-tearing,
formally known as topology and it’s pretty awesome, then you might’ve heard of paths and
deformations of paths are known as homotopies and are just continuous functions
<code>X × I ⟶ Y</code> for topological spaces <code>X</code> and <code>Y</code> and <code>I = [0,1]</code> is the unit interval.
Letting <code>𝒥 = 𝟚</code> be the ‘categorical interval’ we have that functors <code>𝒞 × 𝒥 ⟶ 𝒟</code>
are, by the trivia-relevant result, the same as natural transformations.
That is, natural transformations extend the notion of homotopies, or path-deformations.
</p></li>

<li><p>
   On \href{http://mathoverflow.net/a/75686/42716}{mathoverflow}, the above is recast succinctly as:
a natural transformation from <code>F</code> to <code>G</code> is a functor, targeting an arrow category, whose ‘source’
is <code>F</code> and whose ‘target’ is <code>G</code>.
\[
     ~
       (F ⟶̇ G : 𝒞 ⟶ 𝒟) ≅ Σ η ∶ 𝒞 ⟶ Arr 𝒟 • Src ∘ η = F ∧ Tgt ∘ η = G
     ~
   \]
Where, the projection functors
</p>
<pre class="example">
   Src, Tgt                         : Arr 𝒟 ⟶ 𝒟
   Src (A₁ , A₂ , f)                = A₁
   Src (f  , g  , h₁ , h₂ , proofs) = h₁
</pre>
<p>
with <code>Tgt</code> returning the other indexed items.
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org679a9b0" class="outline-3">
<h3 id="org679a9b0"><span class="section-number-3">7.2</span> Graphs as functors</h3>
<div class="outline-text-3" id="text-7-2">
<p>
We give an example of a functor by building on our graphs from before.
After showing that graphs correspond to certain functors, we then
mention that the notion of graph-map is nothing more than the the associated
natural transformations!
</p>

<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #cd6600;">module</span> <span style="color: #a020f0;">graphs-as-functors</span> <span style="color: #cd6600;">where</span>
</pre>
</div>

<p>
Let us construct our formal graph category, which contains the ingredients for
a graph and a category and nothing more than the equations needed of a category.
The main ingredients of a two-sorted graph are two sort-symbols <code>E, V</code>, along with
two function-symbols <code>s, t</code> from <code>E</code> to <code>V</code> &#x2014;this is also called ‘the signature
of graphs’. To make this into a category, we need function-symbols <code>id</code> and a composition
for which it is a unit.
</p>
<div class="org-src-container">
<pre class="src src-org-agda">  -- <span style="color: #0000cd;">formal</span> <span style="color: #0000cd;">objects</span>
  <span style="color: #cd6600;">data</span> &#119970;&#8320; : <span style="color: #cd6600;">Set</span> <span style="color: #cd6600;">where</span><span style="color: #228b22;"> E V</span> : &#119970;&#8320;

  -- <span style="color: #0000cd;">formal</span> <span style="color: #0000cd;">arrows</span>
  <span style="color: #cd6600;">data</span> &#119970;&#8321; : &#119970;&#8320; &#8594; &#119970;&#8320; &#8594; <span style="color: #cd6600;">Set</span> <span style="color: #cd6600;">where</span>
     <span style="color: #0000cd;">s</span> <span style="color: #0000cd;">t</span> : &#119970;&#8321;<span style="color: #228b22;"> E V</span>              
     <span style="color: #0000cd;">id</span>  : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">o</span><span style="color: #88090B;">}</span> &#8594; &#119970;&#8321; <span style="color: #0000cd;">o</span> <span style="color: #0000cd;">o</span> 

  -- <span style="color: #707183;">(</span><span style="color: #0000cd;">forward</span><span style="color: #707183;">)</span> <span style="color: #0000cd;">composition</span>
  <span style="color: #0000cd;">fcmp</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span> <span style="color: #0000cd;">c</span><span style="color: #88090B;">}</span> &#8594; &#119970;&#8321; <span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span> &#8594; &#119970;&#8321; <span style="color: #0000cd;">b</span> <span style="color: #0000cd;">c</span> &#8594; &#119970;&#8321; <span style="color: #0000cd;">a</span> <span style="color: #0000cd;">c</span>
  <span style="color: #0000cd;">fcmp</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">f</span>
  <span style="color: #0000cd;">fcmp</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">f</span>
</pre>
</div>

<p>
Putting it all together,
</p>
<div class="org-src-container">
<pre class="src src-org-agda">  <span style="color: #cd6600;">instance</span>
   &#119970; :<span style="color: #228b22;"> Category</span>
   &#119970; <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span>
        <span style="color: #707183;">{</span><span style="color: #228b22;"> Obj</span> <span style="color: #cd6600;">=</span> &#119970;&#8320;
        ; _&#10230;_ <span style="color: #cd6600;">=</span> &#119970;&#8321;
        ; _&#10814;_ <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">fcmp</span>
        ;<span style="color: #404040;"> as</span>soc <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span> <span style="color: #0000cd;">c</span> <span style="color: #0000cd;">d</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> <span style="color: #0000cd;">h</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">fcmp-assoc</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> <span style="color: #0000cd;">h</span>
        ;<span style="color: #228b22;"> Id</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">id</span>
        ; <span style="color: #0000cd;">leftId</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">left-id</span>
        ; <span style="color: #0000cd;">rightId</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">right-id</span>
        <span style="color: #88090B;">}</span>
    <span style="color: #cd6600;">where</span>
       -- <span style="color: #0000cd;">exercises</span>: <span style="color: #0000cd;">prove</span><span style="color: #404040;"> as</span>sociativity, <span style="color: #0000cd;">left</span> <span style="color: #0000cd;">and</span> <span style="color: #0000cd;">right</span> <span style="color: #0000cd;">unit</span> <span style="color: #0000cd;">laws</span>
</pre>
</div>

<p>
begin{comment}
</p>
<div class="org-src-container">
<pre class="src src-org-agda">       -- <span style="color: #0000cd;">proofs</span> <span style="color: #0000cd;">are</span> <span style="color: #0000cd;">just</span><span style="color: #228b22;"> C-c C-a</span> <span style="color: #0000cd;">after</span> <span style="color: #0000cd;">some</span> <span style="color: #0000cd;">casing</span>
       <span style="color: #0000cd;">fcmp-assoc</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span> <span style="color: #0000cd;">c</span> <span style="color: #0000cd;">d</span><span style="color: #88090B;">}</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">f</span> : &#119970;&#8321; <span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span><span style="color: #707183;">)</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">g</span> : &#119970;&#8321; <span style="color: #0000cd;">b</span> <span style="color: #0000cd;">c</span><span style="color: #707183;">)</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">h</span> : &#119970;&#8321; <span style="color: #0000cd;">c</span> <span style="color: #0000cd;">d</span><span style="color: #707183;">)</span> &#8594; <span style="color: #0000cd;">fcmp</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">fcmp</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span><span style="color: #707183;">)</span> <span style="color: #0000cd;">h</span> &#8801; <span style="color: #0000cd;">fcmp</span> <span style="color: #0000cd;">f</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">fcmp</span> <span style="color: #0000cd;">g</span> <span style="color: #0000cd;">h</span><span style="color: #707183;">)</span>
       <span style="color: #0000cd;">fcmp-assoc</span> <span style="color: #0000cd;">s</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">fcmp-assoc</span> <span style="color: #0000cd;">t</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">fcmp-assoc</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">s</span> <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">fcmp-assoc</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">t</span> <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">fcmp-assoc</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">s</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">fcmp-assoc</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">t</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">fcmp-assoc</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">right-id</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> : &#119970;&#8321; <span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">fcmp</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">id</span> &#8801; <span style="color: #0000cd;">f</span>
       <span style="color: #0000cd;">right-id</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">s</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">right-id</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">t</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">right-id</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">left-id</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> : &#119970;&#8321; <span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">fcmp</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">f</span> &#8801; <span style="color: #0000cd;">f</span>
       <span style="color: #0000cd;">left-id</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">s</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">left-id</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">t</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
       <span style="color: #0000cd;">left-id</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
</pre>
</div>
<p>
end{comment}
</p>

<p>
Now we can show that every graph <code>G</code> gives rise to a functor: a semantics of <code>𝒢</code> in <code>𝒮e𝓉</code>.
</p>
<div class="org-src-container">
<pre class="src src-org-agda">  <span style="color: #0000cd;">toFunc</span> :<span style="color: #228b22;"> Graph</span> &#8594;<span style="color: #228b22;"> Functor</span> &#119970; &#119982;<span style="color: #0000cd;">e</span>&#120009;
  <span style="color: #0000cd;">toFunc</span><span style="color: #228b22;"> G</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #7388d6;">&#10214;</span>_<span style="color: #7388d6;">&#10215;</span>&#8320; ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #7388d6;">&#10214;</span>_<span style="color: #7388d6;">&#10215;</span>&#8321; ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">fcmp-</span>&#10814; <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">f</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">g</span><span style="color: #88090B;">}</span> <span style="color: #88090B;">}</span>
    <span style="color: #cd6600;">where</span>
      <span style="color: #707183;">&#10214;</span>_<span style="color: #707183;">&#10215;</span>&#8320; :<span style="color: #228b22;"> Obj</span> &#119970; &#8594;<span style="color: #228b22;"> Obj</span> &#119982;<span style="color: #0000cd;">e</span>&#120009;
      <span style="color: #707183;">&#10214;</span> &#119970;&#8320;.V <span style="color: #707183;">&#10215;</span>&#8320; <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Graph</span>.V<span style="color: #228b22;"> G</span>
      <span style="color: #707183;">&#10214;</span> &#119970;&#8320;.E <span style="color: #707183;">&#10215;</span>&#8320; <span style="color: #cd6600;">=</span> &#931; <span style="color: #0000cd;">x</span> &#8758;<span style="color: #228b22;"> Graph</span>.V<span style="color: #228b22;"> G</span> &#8226; &#931; <span style="color: #0000cd;">y</span> &#8758;<span style="color: #228b22;"> Graph</span>.V<span style="color: #228b22;"> G</span> &#8226;<span style="color: #228b22;"> Graph</span>._&#10230;_<span style="color: #228b22;"> G</span> <span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span>
          
      <span style="color: #707183;">&#10214;</span>_<span style="color: #707183;">&#10215;</span>&#8321; : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> :<span style="color: #228b22;"> Obj</span> &#119970;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">y</span> &#8594; <span style="color: #707183;">&#10214;</span> <span style="color: #0000cd;">x</span> <span style="color: #707183;">&#10215;</span>&#8320; &#10230; <span style="color: #707183;">&#10214;</span> <span style="color: #0000cd;">y</span> <span style="color: #707183;">&#10215;</span>&#8320;
      <span style="color: #707183;">&#10214;</span> <span style="color: #0000cd;">s</span> <span style="color: #707183;">&#10215;</span>&#8321; <span style="color: #707183;">(</span><span style="color: #0000cd;">src</span> , <span style="color: #0000cd;">tgt</span> , <span style="color: #0000cd;">edg</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">src</span>
      <span style="color: #707183;">&#10214;</span> <span style="color: #0000cd;">t</span> <span style="color: #707183;">&#10215;</span>&#8321; <span style="color: #707183;">(</span><span style="color: #0000cd;">src</span> , <span style="color: #0000cd;">tgt</span> , <span style="color: #0000cd;">edg</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">tgt</span>
      <span style="color: #707183;">&#10214;</span> <span style="color: #0000cd;">id</span> <span style="color: #707183;">&#10215;</span>&#8321; <span style="color: #0000cd;">x</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">x</span>

      -- <span style="color: #0000cd;">exercise</span>: ~<span style="color: #0000cd;">fcmp</span>~ <span style="color: #0000cd;">is</span> <span style="color: #0000cd;">realised</span><span style="color: #404040;"> as</span> <span style="color: #0000cd;">functional</span> <span style="color: #0000cd;">composition</span>
      <span style="color: #0000cd;">fcmp-</span>&#10814; : &#8704;<span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> : &#119970;&#8321; <span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">g</span> : &#119970;&#8321; <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #707183;">&#10214;</span> <span style="color: #0000cd;">fcmp</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> <span style="color: #707183;">&#10215;</span>&#8321; &#8801; <span style="color: #707183;">&#10214;</span> <span style="color: #0000cd;">f</span> <span style="color: #707183;">&#10215;</span>&#8321; &#10814; <span style="color: #707183;">&#10214;</span> <span style="color: #0000cd;">g</span> <span style="color: #707183;">&#10215;</span>&#8321;
</pre>
</div>
<p>
begin{comment}
</p>
<div class="org-src-container">
<pre class="src src-org-agda">      <span style="color: #0000cd;">fcmp-</span>&#10814; <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">s</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
      <span style="color: #0000cd;">fcmp-</span>&#10814; <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">t</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
      <span style="color: #0000cd;">fcmp-</span>&#10814; <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">s</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
      <span style="color: #0000cd;">fcmp-</span>&#10814; <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">t</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
      <span style="color: #0000cd;">fcmp-</span>&#10814; <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
</pre>
</div>
<p>
end{comment}
</p>

<p>
Conversely, every such functor gives a graph:
</p>
<div class="org-src-container">
<pre class="src src-org-agda">  <span style="color: #0000cd;">fromFunc</span> :<span style="color: #228b22;"> Functor</span> &#119970; &#119982;<span style="color: #0000cd;">e</span>&#120009; &#8594;<span style="color: #228b22;"> Graph</span>
  <span style="color: #0000cd;">fromFunc</span><span style="color: #228b22;"> F</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #228b22;"> V</span>    <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> &#119970;&#8320;.V
    ; _&#10230;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> &#8594; &#931; <span style="color: #0000cd;">e</span> &#8758; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> &#119970;&#8320;.E &#8226; <span style="color: #0000cd;">src</span> <span style="color: #0000cd;">e</span> &#8801; <span style="color: #0000cd;">x</span> &#215; <span style="color: #0000cd;">tgt</span> <span style="color: #0000cd;">e</span> &#8801; <span style="color: #0000cd;">y</span> -- <span style="color: #0000cd;">the</span> <span style="color: #0000cd;">type</span> <span style="color: #0000cd;">of</span> <span style="color: #0000cd;">edges</span> <span style="color: #0000cd;">whose</span> <span style="color: #0000cd;">source</span> <span style="color: #0000cd;">is</span> <span style="color: #0000cd;">x</span> <span style="color: #0000cd;">and</span> <span style="color: #0000cd;">target</span> <span style="color: #0000cd;">is</span> <span style="color: #0000cd;">y</span>
    <span style="color: #88090B;">}</span>
    <span style="color: #cd6600;">where</span> <span style="color: #0000cd;">tgt</span> <span style="color: #0000cd;">src</span> : <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> &#119970;&#8320;.E &#8594; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> &#119970;&#8320;.V
          <span style="color: #0000cd;">src</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> &#119970;&#8321;.<span style="color: #0000cd;">s</span>
          <span style="color: #0000cd;">tgt</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> &#119970;&#8321;.<span style="color: #0000cd;">t</span>
</pre>
</div>

<p>
It is to be noted that we can define ‘‘graphs over <code>𝒞~’’ to be the category ~Func 𝒢 𝒞</code>.
Some consequences are as follows: notion of graph in any category, the notion of graph-map
is the specialisation of natural transformation (!), and most importantly: all the power of functor categories
is avaiable for the study of graphs.
</p>

<p>
In some circles, you may hear people saying an ‘algebra over the signature of graphs’ is an interpretation
domain (<code>𝒞</code>) and an operation (<code>Functor 𝒢 𝒞</code>) interpreting the symbols.
</p>

<p>
We no longer make use of this two-sorted approach to graphs.
</p>
</div>
</div>
</div>

<div id="outline-container-orgbb0404c" class="outline-2">
<h2 id="orgbb0404c"><span class="section-number-2">8</span> <span class="todo TODO">TODO</span> A few categorical constructions</h2>
<div class="outline-text-2" id="text-8">
<p>
We briefly take a pause to look at the theory of category theory.
In particular, we show a pair of constructions to get new categories from old ones,
interpret these constructions from the view of previously mentioned categories, and
discuss how to define the morphism type <code>_⟶_</code> on morphisms themselves, thereby
yielding a functor.
</p>
</div>

<div id="outline-container-org738bf8c" class="outline-3">
<h3 id="org738bf8c"><span class="section-number-3">8.1</span> Opposite</h3>
<div class="outline-text-3" id="text-8-1">
<p>
The ‘dual’ or ‘opposite’ category <code>𝒞 ᵒᵖ</code> is the category constructed from <code>𝒞</code> by
reversing arrows: <code>(A ⟶ B) ≔ (B ⟶ A)</code> and then necessairly <code>(f ⨾ g) ≔ g ⨾ f</code>.
A contravariant functor, or cofunctor, is a functor F from an opposite category and so
there is a reversal of compostions: <code>F(f ⨾ g) = F g ⨾ F f</code>.
</p>
<pre class="example">
 _ᵒᵖ : ∀ {i j} → Category {i} {j} → Category
 𝒞 ᵒᵖ = {! exercise !}
</pre>
<p>
begin{comment}
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> _&#7506;&#7510; : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Category</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Category</span>
 &#119966; &#7506;&#7510; <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #228b22;"> Obj</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Obj</span> &#119966;
    ; _&#10230;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span><span style="color: #228b22;"> A B</span> &#8594;<span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">B</span> &#10230;<span style="color: #228b22;"> A</span><span style="color: #7388d6;">)</span>
    ; _&#10814;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> &#8594; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">g</span> &#10814; <span style="color: #0000cd;">f</span><span style="color: #7388d6;">)</span>
    ;<span style="color: #404040;"> as</span>soc <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">sym</span><span style="color: #404040;"> as</span>soc
    ;<span style="color: #228b22;"> Id</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span>
    ; <span style="color: #0000cd;">leftId</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">rightId</span>
    ; <span style="color: #0000cd;">rightId</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">leftId</span>
    <span style="color: #88090B;">}</span>
</pre>
</div>
<p>
end{comment}
</p>

<p>
Notice that <code>𝒞 ᵒᵖ ᵒᵖ = 𝒞</code> and <code>𝒞 ᵒᵖ ≅ 𝒞</code>
&#x2013;one may have an intuitive idea of what this isomorphsim means,
but formally it is only meaningful in the context of an ambient category; keep reading ;)
</p>

<p>
&#x2013; we must admit that for categories, the notion of isomorphism is considered less useful
than that of equivalence which weakens the condition of the to-from functors being
inverses to just being naturaly isomorphic to identites. See evil.
</p>


<p>
Some interpretations:
</p>

<ul class="org-ul">
<li><p>
<code>𝒮e𝓉 ᵒᵖ</code> is usual sets and functions but with ‘backwards composition’:
</p>
<div class="org-src-container">
<pre class="src src-org-agda">    <span style="color: #cd6600;">infix</span> <span style="color: #a020f0;">10</span> _&#8728;_
    _&#8728;_ : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #7388d6;">{</span><span style="color: #0000cd;">r</span> :<span style="color: #228b22;"> Category</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}}</span> <span style="color: #707183;">{</span>A<span style="color: #228b22;"> B C</span> :<span style="color: #228b22;"> Obj</span> <span style="color: #0000cd;">r</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> B</span> &#10230;<span style="color: #228b22;"> C</span> &#8594; <span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span> &#8594;<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> C</span>
    <span style="color: #0000cd;">f</span> &#8728; <span style="color: #0000cd;">g</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">g</span> &#10814; <span style="color: #0000cd;">f</span>
</pre>
</div>
<p>
Indeed, we have  <code>g ⨾ f within 𝒞 = f ∘ g within 𝒞 ᵒᵖ</code>; which is how these composition operators
are usually related in informal mathematics (without mention of the ambient categories of-course).
</p>

<p>
On a more serious note, the opposite of 𝒮e𝓉 is clearly <code>𝓉e𝒮</code> haha
&#x2014;technically for the purposes of this pun we identify the words ‘opposite’ and ‘reverse’.
</p></li>

<li>For a discrete category, its opposite is itself.</li>

<li>For a monoid (viewed as a category), its opposite is itself if the monoid operation is commutative, otherwise
it is the ‘dual monoid’.</li>

<li><p>
  For a poset (viewed as a category), its opposite is the ‘dual poset’: <code>(P, ⊑)ᵒᵖ = (P, ⊒)</code>.
</p>

<p>
In particular, the ‘least upper bound’, or ‘supremum’ in <code>(P, ⊑)</code> of two elements
<code>x,y</code> is an element <code>s</code> with the ‘universal property’: <code>∀ z • x ⊑ z ∧ y ⊑ z ≡ s ⊑ z</code>.
However, switching <code>⊑</code> with <code>⊒</code> gives us the notion of ‘infimum’, ‘greatest upper bound’!
So any theorems about supremums automatically hold for infimums since the infifum is nothing
more than the supremum in the dual category of the poset.
</p>

<p>
It is not difficult to see that this idea of ‘2 for the price of 1’ for theorems holds for all
categories.
</p></li>

<li>What about the category of functors and natural transformations?</li>
</ul>


<p>
Speaking of functors, we can change the type of a functor by <code>ᵒᵖ</code>-ing its source and target,
while leaving it alone,
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> -- <span style="color: #0000cd;">this</span> <span style="color: #0000cd;">only</span> <span style="color: #0000cd;">changes</span> <span style="color: #0000cd;">type</span>
 <span style="color: #0000cd;">opify</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">i</span>&#8217; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}}</span> &#8594;<span style="color: #228b22;"> Functor</span> &#119966; &#119967; &#8594;<span style="color: #228b22;"> Functor</span> <span style="color: #707183;">(</span>&#119966; &#7506;&#7510;<span style="color: #707183;">)</span> <span style="color: #707183;">(</span>&#119967; &#7506;&#7510;<span style="color: #707183;">)</span>
 <span style="color: #0000cd;">opify</span><span style="color: #228b22;"> F</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F</span> ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Functor</span>.<span style="color: #0000cd;">id</span><span style="color: #228b22;"> F</span> ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Functor</span>.<span style="color: #0000cd;">comp</span><span style="color: #228b22;"> F</span> <span style="color: #88090B;">}</span>
</pre>
</div>

<blockquote>
<p>
‘‘Category Theory is the ~opi~um of the people!’’ &#x2014; Karl Marx might say it had cats existed in his time
</p>
</blockquote>

<p>
This two definitions seem to indicate that we have some form of opposite-functor <code>…</code> ;)
&#x2014;keep reading!
</p>

<p>
<code>opify</code> seems to show that <code>Functor 𝒞 𝒟 ≡ Functor (𝒞 ᵒᵖ) (𝒟 ᵒᵖ)</code>, or alternatively a
functor can have ‘two different types’ &#x2014;this is akin to using the integers as reals
without writing out the inclusion formally, leaving it implicit; however, in the Agda mechanization
everything must be made explicit &#x2014;the type system doesn’t let you get away with such things.
Professor Maarten Fokkinga has informed me that
the formalization allowing multiple-types is called a
\href{http://maartenfokkinga.github.io/utwente/mmf92b.pdf}{pre-category}.
</p>
</div>

<div id="outline-container-orga7366dc" class="outline-4">
<h4 id="orga7366dc"><span class="section-number-4">8.1.1</span> ah-yeah: ∂ and dagger categories</h4>
<div class="outline-text-4" id="text-8-1-1">
<p>
With <code>𝒞𝒶𝓉</code> in-hand, we can formalise the opposite, or ~∂~ual, functor:
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> &#8706; : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> &#8594; &#119966;&#119990;&#120009; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> &#10230; &#119966;&#119990;&#120009;
 &#8706; <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> _&#7506;&#7510; ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">opify</span> ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #88090B;">}</span>
</pre>
</div>

<p>
Conjecture: assuming categories are equipped with a contravariant invultionary functor that is identity on objects, we can show that the identity functor is naturally isomorphic to the opposite functor.
</p>

<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #0000cd;">ah-yeah</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span>
     -- <span style="color: #0000cd;">identity</span> <span style="color: #0000cd;">on</span> <span style="color: #0000cd;">objects</span> <span style="color: #0000cd;">cofunctor</span>
     &#8594; <span style="color: #707183;">(</span>_&#728;  : <span style="color: #7388d6;">{</span><span style="color: #909183;">{</span>&#119966; :<span style="color: #228b22;"> Obj</span> <span style="color: #709870;">(</span>&#119966;&#119990;&#120009; <span style="color: #907373;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #907373;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span><span style="color: #709870;">)</span><span style="color: #88090B;">}}</span> &#8594; &#8704; <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">y</span> &#8594; <span style="color: #0000cd;">y</span> &#10230; <span style="color: #0000cd;">x</span><span style="color: #707183;">)</span>
     &#8594;<span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Id</span>&#728; : &#8704; <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Category</span>.I<span style="color: #0000cd;">d</span> &#119966; <span style="color: #909183;">{</span><span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span><span style="color: #7388d6;">)</span> &#728; &#8801;<span style="color: #228b22;"> Category</span>.I<span style="color: #0000cd;">d</span> &#119966; <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span><span style="color: #707183;">)</span>
     &#8594; <span style="color: #707183;">(</span>&#10814;-&#728; : &#8704; <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span> :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">f</span> : <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">g</span> : <span style="color: #0000cd;">y</span> &#10230; <span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #7388d6;">)</span>&#728; &#8801; <span style="color: #0000cd;">g</span> &#728; &#10814; <span style="color: #0000cd;">f</span> &#728;<span style="color: #707183;">)</span>
     -- <span style="color: #0000cd;">which</span> <span style="color: #0000cd;">is</span> <span style="color: #0000cd;">involutionary</span>
     &#8594; <span style="color: #707183;">(</span>&#728;&#728; : &#8704; <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">f</span> : <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> &#728;<span style="color: #7388d6;">)</span> &#728; &#8801; <span style="color: #0000cd;">f</span><span style="color: #707183;">)</span>
     -- <span style="color: #0000cd;">which</span> <span style="color: #0000cd;">is</span> <span style="color: #0000cd;">respected</span> <span style="color: #0000cd;">by</span> <span style="color: #0000cd;">other</span> <span style="color: #0000cd;">functors</span>
     &#8594; <span style="color: #707183;">(</span><span style="color: #0000cd;">respect</span> : &#8704; <span style="color: #7388d6;">{</span>&#119966; &#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F : &#119966; &#10230; &#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">f</span> : <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> &#728;<span style="color: #7388d6;">)</span> &#8801; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">f</span><span style="color: #7388d6;">)</span>&#728;<span style="color: #707183;">)</span>
     -- <span style="color: #0000cd;">then</span>
     &#8594; &#8706; &#8773;<span style="color: #228b22;"> Id</span> <span style="color: #0000cd;">within</span><span style="color: #228b22;"> Func</span> <span style="color: #707183;">(</span>&#119966;&#119990;&#120009;<span style="color: #707183;">)</span> &#119966;&#119990;&#120009;
</pre>
</div>
<pre class="example">
 ah-yeah = {! exercise !}
</pre>
<p>
begin{comment}
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #0000cd;">ah-yeah</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> _&#728;<span style="color: #228b22;"> Id</span>&#728; &#10814;-&#728; &#728;&#728; <span style="color: #0000cd;">respect</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #0000cd;">to</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> II</span>
   ; <span style="color: #0000cd;">from</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> JJ</span>
   ; <span style="color: #0000cd;">lid</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">nattransext</span> <span style="color: #7388d6;">{</span>&#119966; <span style="color: #cd6600;">=</span> &#119966;&#119990;&#120009;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119966;&#119990;&#120009;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F <span style="color: #cd6600;">=</span> &#8706;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>G <span style="color: #cd6600;">=</span> &#8706;<span style="color: #88090B;">}</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Category</span>._&#10814;_ &#119977;&#120009; <span style="color: #909183;">{</span>&#8706;<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>I<span style="color: #0000cd;">d</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>&#8706;<span style="color: #88090B;">}</span><span style="color: #228b22;"> II JJ</span><span style="color: #7388d6;">)</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Category</span>.I<span style="color: #0000cd;">d</span> &#119977;&#120009; <span style="color: #909183;">{</span>&#8706;<span style="color: #88090B;">}</span><span style="color: #7388d6;">)</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">funcext</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #909183;">(</span>&#8801;-<span style="color: #0000cd;">sym</span> &#728;&#728;<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>
   ; <span style="color: #0000cd;">rid</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">nattransext</span> <span style="color: #7388d6;">{</span>&#119966; <span style="color: #cd6600;">=</span> &#119966;&#119990;&#120009;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119966;&#119990;&#120009;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>G <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span><span style="color: #88090B;">}</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Category</span>._&#10814;_ &#119977;&#120009; <span style="color: #909183;">{</span>I<span style="color: #0000cd;">d</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>&#8706;<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>I<span style="color: #0000cd;">d</span><span style="color: #88090B;">}</span><span style="color: #228b22;"> JJ II</span><span style="color: #7388d6;">)</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Category</span>.I<span style="color: #0000cd;">d</span> &#119977;&#120009; <span style="color: #909183;">{</span>I<span style="color: #0000cd;">d</span><span style="color: #88090B;">}</span><span style="color: #7388d6;">)</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">funcext</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #909183;">(</span>&#8801;-<span style="color: #0000cd;">sym</span> &#728;&#728;<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> <span style="color: #88090B;">}</span>
           -- <span style="color: #0000cd;">we</span> <span style="color: #0000cd;">use</span><span style="color: #228b22;"> NatTrans</span> <span style="color: #0000cd;">extensionality</span> <span style="color: #0000cd;">on</span> <span style="color: #0000cd;">category</span> ~&#119966;&#119990;&#120009;~ <span style="color: #0000cd;">on</span> <span style="color: #0000cd;">functor</span> ~I<span style="color: #0000cd;">d</span>~ <span style="color: #cd6600;">with</span> <span style="color: #0000cd;">natural</span> <span style="color: #0000cd;">transformations</span>
           -- <span style="color: #0000cd;">the</span><span style="color: #228b22;"> LHS</span> <span style="color: #0000cd;">starting</span> <span style="color: #0000cd;">at</span><span style="color: #228b22;"> Id</span> <span style="color: #0000cd;">going</span> <span style="color: #0000cd;">to</span> ~&#8706;~ <span style="color: #0000cd;">then</span> <span style="color: #0000cd;">to</span> ~I<span style="color: #0000cd;">d</span>~ <span style="color: #0000cd;">and</span> <span style="color: #0000cd;">the</span><span style="color: #228b22;"> RHS</span> <span style="color: #0000cd;">being</span> <span style="color: #0000cd;">the</span> <span style="color: #0000cd;">natural</span> <span style="color: #0000cd;">transformation</span> <span style="color: #0000cd;">on</span> <span style="color: #0000cd;">the</span> <span style="color: #0000cd;">identity</span> <span style="color: #0000cd;">functor</span>.
   <span style="color: #cd6600;">where</span>
     &#119977;&#120009; <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Func</span> &#119966;&#119990;&#120009; &#119966;&#119990;&#120009; -- <span style="color: #0000cd;">the</span> <span style="color: #0000cd;">category</span> <span style="color: #0000cd;">of</span> ~&#119977;~<span style="color: #0000cd;">atural</span> <span style="color: #0000cd;">transormations</span><span style="color: #404040;"> as</span> <span style="color: #0000cd;">morphisms</span>
     
    <span style="color: #228b22;"> I</span> : &#8704; <span style="color: #707183;">{</span>&#119966;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">obj</span> &#8706; &#119966; &#10230; &#119966;
    <span style="color: #228b22;"> I</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #707183;">{</span>&#119966;<span style="color: #88090B;">}</span> &#8594; <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span> ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> _&#728; ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span>&#728; ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> &#10814;-&#728; <span style="color: #88090B;">}</span>
     
    <span style="color: #228b22;"> Inat</span> : &#8704; <span style="color: #707183;">{</span>&#119966; &#119967;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>F : &#119966; &#10230; &#119967;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">mor</span> &#8706;<span style="color: #228b22;"> F</span> &#10814;<span style="color: #228b22;"> I</span> &#8801;<span style="color: #228b22;"> I</span> &#10814;<span style="color: #228b22;"> F</span>
    <span style="color: #228b22;"> Inat</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #707183;">{</span>&#119966; &#119967;<span style="color: #228b22;"> F</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">funcext</span> <span style="color: #707183;">{</span>F <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">mor</span> &#8706;<span style="color: #228b22;"> F</span> &#10814;<span style="color: #228b22;"> I</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>G <span style="color: #cd6600;">=</span><span style="color: #228b22;"> I</span> &#10814;<span style="color: #228b22;"> F</span><span style="color: #88090B;">}</span>&#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">f</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">respect</span> <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">f</span><span style="color: #88090B;">}</span><span style="color: #707183;">)</span>

    <span style="color: #228b22;"> II</span> :<span style="color: #228b22;"> NatTrans</span> &#8706;<span style="color: #228b22;"> Id</span>
    <span style="color: #228b22;"> II</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> I</span> , <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F<span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Inat</span> <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F<span style="color: #88090B;">}</span><span style="color: #707183;">)</span>

    <span style="color: #228b22;"> J</span> : &#8704; <span style="color: #707183;">{</span>&#119966;<span style="color: #88090B;">}</span> &#8594; &#119966; &#10230; <span style="color: #0000cd;">obj</span> &#8706; &#119966;
    <span style="color: #228b22;"> J</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span> ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> _&#728; ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span>&#728; ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> &#10814;-&#728; <span style="color: #88090B;">}</span>

    <span style="color: #228b22;"> Jnat</span> : &#8704; <span style="color: #707183;">{</span>&#119966; &#119967;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>F : &#119966; &#10230; &#119967;<span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> J</span> &#10814; <span style="color: #0000cd;">mor</span> &#8706;<span style="color: #228b22;"> F</span> &#8801;<span style="color: #228b22;"> F</span> &#10814;<span style="color: #228b22;"> J</span>
    <span style="color: #228b22;"> Jnat</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #707183;">{</span>&#119966; &#119967;<span style="color: #228b22;"> F</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">funcext</span> <span style="color: #707183;">{</span>F <span style="color: #cd6600;">=</span><span style="color: #228b22;"> J</span> &#10814; <span style="color: #0000cd;">mor</span> &#8706;<span style="color: #228b22;"> F</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>G <span style="color: #cd6600;">=</span><span style="color: #228b22;"> F</span> &#10814;<span style="color: #228b22;"> J</span><span style="color: #88090B;">}</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">f</span><span style="color: #88090B;">}</span> &#8594; &#8801;-<span style="color: #0000cd;">sym</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">respect</span> <span style="color: #909183;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>F<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">f</span><span style="color: #88090B;">}</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

    <span style="color: #228b22;"> JJ</span> :<span style="color: #228b22;"> NatTrans Id</span> &#8706;
    <span style="color: #228b22;"> JJ</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> J</span> , <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>F<span style="color: #88090B;">}</span> &#8594; &#8801;-<span style="color: #0000cd;">sym</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Jnat</span> <span style="color: #909183;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>&#119967;<span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>F<span style="color: #88090B;">}</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
</pre>
</div>
<p>
end{comment}
</p>

<p>
Some things to note.
</p>

<ul class="org-ul">
<li><p>
  Categories whose morphisms are all isomorphisms are called ‘groupoids’ &#x2014;groups are just one-object groupoids.
Consequently, restricted to groupoids the opposite functor is naturally isomorphic to the identity functor!
</p>

<p>
In fact, the group case was the motivator for me to conjecture the theorem, which took a while to prove since I hadn’t
a clue what I needed to assume. Here we’d use <code>a ˘ ≔ a ⁻¹</code>.
</p></li>

<li><p>
  Consider the category <code>Rel</code> whose objects are sets and whose morphisms are ‘typed-relations’ <code>(S, R, T)</code>, where <code>R</code> is a relation
from set <code>S</code> to set <code>T</code>, and
composition is just relational composition
&#x2014;the notion of ‘untyped’, or multi-typed, morphisms is formalized as pre-categories;
see \href{http://maartenfokkinga.github.io/utwente/mmf92b.pdf}{Fokkinga}.
Then we can define an endofunctor by taking <code>-˘</code> to be relational converse: <code>x (R ˘) y ⇔ y R x</code>.
Consequently, restricted to the category <code>Rel</code> we have that the opposite functor is naturally isomorphic to the identity functor.
</p>

<p>
begin{comment}
Indeed, in the proof above, all quantification’s become over a unit type: only possibility is
<code>Rel</code>.
</p>

<p>
Then, <code>I : Rel ᵒᵖ ⟶ Rel</code> and <code>J : Rel ⟶ Rel ᵒᵖ</code>, and the lid-rid proofs amount to saying that
the two are inverses.
end{comment}
</p></li>
</ul>

<p>
The above items are instance of a more general concept, of course.
</p>

<p>
A category with an involutionary contravariant endofunctor that is the identity on objects
is known as \emph{a dagger category, an involutive/star category, or a category with converse}
&#x2014;and the functor is denoted as a superscript suffix by <code>†, *, ˘</code>, respectively.
The dagger notation probably comes from
the hilbert space setting while the converse notation comes from the relation algebra setting.
As far as I know, the first two names are more widely known.
A dagger category bridges the gap between arbitrary categories and groupoids.
</p>

<p>
Just as matrices with matrix multiplication do not form a monoid but rather a category, we have
that not all matrices are invertible but they all admit transposition and so we have a dagger
category. In the same vein, relations admit converse and so give rise to a category with converse.
</p>

<p>
Besides relations and groupoids, other examples include
</p>
<ul class="org-ul">
<li>discrete categories with the dagger being the identity functor</li>
<li>every monoid with an anti-involution is trivially a dagger category; e.g.,
lists with involution being reverse.</li>
<li>commutative monoids are anti-involutive monoids with antiinvolution being identity</li>
</ul>

<p>
Spoilers!! Just as the category of categories is carestian closed, so too is the category of dagger
categories and dagger preserving functors (cf <code>respect</code> above).
</p>

<p>
%% a pseudoheap is a set H with an binary-operation assining function  ⟨_⟩ : H → (H × H → H)
%% such that
%% mutual-assoc:  (a ⟨b⟩ c) ⟨d⟩ e = a ⟨b⟩ (c ⟨d⟩ e)
%% commutative: x ⟨a⟩ y = y ⟨a⟩ x
%%
%% Every involutive monoid is a pseudoheap:
%% x ⟨y⟩ z ≔ x · y ˘ · z
</p>
</div>
</div>
</div>

<div id="outline-container-org6c58ff1" class="outline-3">
<h3 id="org6c58ff1"><span class="section-number-3">8.2</span> Products</h3>
<div class="outline-text-3" id="text-8-2">
<p>
For any two categories <code>𝒞</code> and <code>𝒟</code> we can construct their ‘product’ category
<code>𝒞 ⊗ 𝒟</code> whose objects and morphisms are pairs with components from <code>𝒞</code> and <code>𝒟</code>:
<code>Obj (𝒞 ⊗ 𝒟) = Obj 𝒞 × Obj 𝒟</code> and <code>(A , X) ⟶ (B , Y) = (A ⟶ B) × (X ⟶ Y)</code>.
</p>
<pre class="example">
 -- we cannot overload symbols in Agda and so using ~⊗~ in-place of more common ~×~.
 _⊗_ : ∀ {i j i’ j’} → Category {i} {j} → Category {i’} {j’} → Category
 𝒞 ⊗ 𝒟 = {! exercise !}
</pre>
<p>
begin{comment}
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #cd6600;">infix</span> <span style="color: #a020f0;">5</span> _&#8855;_
 _&#8855;_ : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">i</span>&#8217; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Category</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Category</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Category</span>
 &#119966; &#8855; &#119967; <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #228b22;"> Obj</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Obj</span> &#119966; &#215;<span style="color: #228b22;"> Obj</span> &#119967;
    ; _&#10230;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span><span style="color: #228b22;"> AX BY</span> &#8594; <span style="color: #cd6600;">let</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">A</span> ,<span style="color: #228b22;"> X</span><span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> AX</span> ;<span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">B</span> ,<span style="color: #228b22;"> Y</span><span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> BY</span> <span style="color: #cd6600;">in</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">A</span> &#10230;<span style="color: #228b22;"> B</span><span style="color: #7388d6;">)</span> &#215;<span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">X</span> &#10230;<span style="color: #228b22;"> Y</span><span style="color: #7388d6;">)</span>
    ; _&#10814;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">fk</span> <span style="color: #0000cd;">gl</span> &#8594; <span style="color: #cd6600;">let</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> , <span style="color: #0000cd;">k</span><span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">fk</span> ; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">g</span> , <span style="color: #0000cd;">l</span><span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">gl</span> <span style="color: #cd6600;">in</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span> , <span style="color: #0000cd;">k</span> &#10814; <span style="color: #0000cd;">l</span><span style="color: #7388d6;">)</span>
    ;<span style="color: #404040;"> as</span>soc <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">helper</span><span style="color: #404040;"> as</span>soc<span style="color: #404040;"> as</span>soc 
    ;<span style="color: #228b22;"> Id</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Id</span> ,<span style="color: #228b22;"> Id</span>
    ; <span style="color: #0000cd;">leftId</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">helper</span> <span style="color: #0000cd;">leftId</span> <span style="color: #0000cd;">leftId</span>
    ; <span style="color: #0000cd;">rightId</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">helper</span> <span style="color: #0000cd;">rightId</span> <span style="color: #0000cd;">rightId</span>
    <span style="color: #88090B;">}</span>
    <span style="color: #cd6600;">where</span> <span style="color: #0000cd;">helper</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>A : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>B : <span style="color: #cd6600;">Set</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">a</span>&#8217; :<span style="color: #228b22;"> A</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">b</span> <span style="color: #0000cd;">b</span>&#8217; :<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">a</span> &#8801; <span style="color: #0000cd;">a</span>&#8217; &#8594; <span style="color: #0000cd;">b</span> &#8801; <span style="color: #0000cd;">b</span>&#8217; &#8594; <span style="color: #707183;">(</span><span style="color: #0000cd;">a</span> , <span style="color: #0000cd;">b</span><span style="color: #707183;">)</span> &#8801; <span style="color: #707183;">(</span><span style="color: #0000cd;">a</span>&#8217; , <span style="color: #0000cd;">b</span>&#8217;<span style="color: #707183;">)</span>
          <span style="color: #0000cd;">helper</span> &#8801;-<span style="color: #0000cd;">refl</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span>
</pre>
</div>
<p>
end{comment}
</p>

<p>
Observe that in weaker languages a category is specified by its objects, morphisms, and composition
&#x2014;the proof obligations are delegated to comments, if they are realized at all.
In such settings, one would need to prove that this construction actually reduces a full-fledged
category. Even worse, this proof may be a distance away in some documentation.
With dependent types, our proof obligation is nothing more than another component of the program,
a piece of the category type.
</p>

<p>
In a similar fashion we can show that the sum of two categories is again a category and in general
we have the same for quantified variants: <code>𝒬 𝒞 ∶ Family • 𝒞</code> where <code>𝒬 ∈ { ∏ , Σ }</code>.
For the empty family, the empty sum yields the category <code>𝟘</code> with no objects and
the empty sum yields the category <code>𝟙</code> of one object.
One can then show the usual ‘laws of arithmetic’ &#x2014;i.e., an commutative monoid&#x2014;
hold in this setting: letting <code>★ ∈ {+,×}</code>, we have
associtivity <code>A ★ (B ★ C) ≅ (A ★ B) ★ C</code>, symmetry <code>A ★ B ≅ B ★ A</code>,
unit <code>𝟙 × A ≅ 𝟘 + A ≅ A</code>, and zero <code>𝟘 × A ≅ 𝟘</code>.
These notions can be defined for any category though the objects may or may not exist
&#x2014; in <code>𝒮e𝓉</code> and <code>𝒢𝓇𝒶𝓅𝒽</code>, for example, they do exist ;) &#x2014;and these associated arithmetical
laws also hold.
</p>

<p>
Question: what of the distributively law,
<code>A × (B + C) ≅ (A × B) + (A × C)</code>, does it hold in the mentioned cases?
Let <code>𝒫𝒮e𝓉</code> be the category of sets with a distinguished point, i.e.,  <code>Σ S : Obj 𝒮e𝓉 • S</code>, and
functions that preserve the ‘point’, one can then show &#x2014;if he or she so desires, and is not
lazy&#x2014; that this category has notions of product and sum but distributively fails.
</p>

<p>
Some interpretations:
</p>
<ul class="org-ul">
<li>For discrete categories, this is the usual Cartesian product.</li>
<li>For monoid (or poset) categories, this says that the product of two monoids (or posets) is again
a monoid (respectively poset. This follows since the product does not affect the number of
objects and so the product is again a one-object category, i.e., a monoid (poset respectively).</li>
</ul>

<p>
As expected, we have projections,
</p>
<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #228b22;"> Fst</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">i</span>&#8217; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}}</span> &#8594;<span style="color: #228b22;"> Functor</span> <span style="color: #707183;">(</span>&#119966; &#8855; &#119967;<span style="color: #707183;">)</span> &#119966;
<span style="color: #228b22;"> Fst</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">proj</span>&#8321; ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">proj</span>&#8321; ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #88090B;">}</span>

<span style="color: #228b22;"> Snd</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">i</span>&#8217; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}}</span> &#8594;<span style="color: #228b22;"> Functor</span> <span style="color: #707183;">(</span>&#119966; &#8855; &#119967;<span style="color: #707183;">)</span> &#119967;
<span style="color: #228b22;"> Snd</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span> <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">proj</span>&#8322; ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">proj</span>&#8322; ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">refl</span> <span style="color: #88090B;">}</span>
</pre>
</div>
</div>

<div id="outline-container-orgf7f4563" class="outline-4">
<h4 id="orgf7f4563"><span class="section-number-4">8.2.1</span> Currying</h4>
<div class="outline-text-4" id="text-8-2-1">
<p>
For types we have <code>(𝒳 × 𝒴 ⟶ 𝒵) ≅ (𝒳 ⟶ 𝒵 ^ 𝒴) ≅ (𝒴 ⟶ 𝒵 ^ 𝒳)</code>, and categories are
essentially types endowed with nifty structure,
and so we expect it to hold in that context as well.
</p>
<pre class="example">
  -- Everyone usually proves currying in the first argument,
  -- let’s rebel and do so for the second argument
 curry₂ : ∀ {ix jx iy jy iz jz}
          {𝒳 : Category {ix} {jx}} {𝒴 : Category {iy} {jy}} {𝒵 : Category {iz} {jz}}
        → Functor (𝒳 ⊗ 𝒴) 𝒵 → Functor 𝒴 (Func 𝒳 𝒵)
 curry₂ = {! exercise !}
</pre>
<p>
begin{comment}
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #0000cd;">curry</span>&#8322; : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">ix</span> <span style="color: #0000cd;">jx</span> <span style="color: #0000cd;">iy</span> <span style="color: #0000cd;">jy</span> <span style="color: #0000cd;">iz</span> <span style="color: #0000cd;">jz</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119987; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">ix</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">jx</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119988; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">iy</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">jy</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119989; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">iz</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">jz</span><span style="color: #88090B;">}}</span>
         &#8594;<span style="color: #228b22;"> Functor</span> <span style="color: #707183;">(</span>&#119987; &#8855; &#119988;<span style="color: #707183;">)</span> &#119989; &#8594;<span style="color: #228b22;"> Functor</span> &#119988;<span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Func</span> &#119987; &#119989;<span style="color: #707183;">)</span>
 <span style="color: #0000cd;">curry</span>&#8322; <span style="color: #707183;">{</span>&#119987; <span style="color: #cd6600;">=</span> &#119987;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119988;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119989;<span style="color: #88090B;">}</span><span style="color: #228b22;"> F</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
    <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcify</span>
  ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">natify</span>
  ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">nattransext</span> <span style="color: #7388d6;">{</span>F <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">natify</span><span style="color: #228b22;"> </span><span style="color: #909183;">(</span><span style="color: #228b22;">Id</span> <span style="color: #709870;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Category</span>.I<span style="color: #0000cd;">d</span><span style="color: #228b22;"> </span><span style="color: #909183;">(</span><span style="color: #228b22;">Func</span> &#119987; &#119989;<span style="color: #909183;">)</span> <span style="color: #909183;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span><span style="color: #7388d6;">)</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Functor</span>.<span style="color: #0000cd;">id</span><span style="color: #228b22;"> F</span><span style="color: #7388d6;">)</span>
  ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">nattransext</span> <span style="color: #7388d6;">{</span>F <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">natify</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> <span style="color: #7388d6;">(</span><span style="color: #228b22;"> Category</span>._&#10814;_<span style="color: #228b22;"> </span><span style="color: #909183;">(</span><span style="color: #228b22;">Func</span> &#119987; &#119989;<span style="color: #909183;">)</span> <span style="color: #909183;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>B <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #909183;">{</span>C <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">natify</span> <span style="color: #0000cd;">f</span><span style="color: #909183;">)</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">natify</span> <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span> <span style="color: #7388d6;">)</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">begin</span>
             <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #909183;">(</span><span style="color: #228b22;">Id</span> , <span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span>
           &#8801;<span style="color: #909183;">&#10216;</span> &#8801;-<span style="color: #0000cd;">cong</span> <span style="color: #709870;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">e</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #907373;">(</span><span style="color: #0000cd;">e</span> , <span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #907373;">)</span><span style="color: #709870;">)</span> <span style="color: #709870;">(</span>&#8801;-<span style="color: #0000cd;">sym</span> <span style="color: #0000cd;">rightId</span><span style="color: #709870;">)</span> <span style="color: #909183;">&#10217;</span>
             <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #909183;">(</span><span style="color: #228b22;">Id</span> &#10814;<span style="color: #228b22;"> Id</span> , <span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span>
           &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #0000cd;">functors-preserve-composition</span> <span style="color: #909183;">&#10217;</span>
             <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #909183;">(</span><span style="color: #228b22;">Id</span> , <span style="color: #0000cd;">f</span><span style="color: #909183;">)</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #909183;">(</span><span style="color: #228b22;">Id</span> , <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span>
           &#8718;<span style="color: #7388d6;">)</span> <span style="color: #88090B;">}</span>
  <span style="color: #cd6600;">where</span> <span style="color: #0000cd;">funcify</span> : <span style="color: #707183;">(</span><span style="color: #0000cd;">y</span> :<span style="color: #228b22;"> Obj</span> &#119988;<span style="color: #707183;">)</span> &#8594;<span style="color: #228b22;"> Functor</span> &#119987; &#119989;
        <span style="color: #0000cd;">funcify</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span><span style="color: #228b22;"> Y</span> &#8594; <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
            <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span><span style="color: #228b22;"> X</span> &#8594; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">X</span> ,<span style="color: #228b22;"> Y</span><span style="color: #7388d6;">)</span>
          ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">f</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> ,<span style="color: #228b22;"> Id</span> <span style="color: #909183;">{</span>A <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Y</span><span style="color: #88090B;">}</span><span style="color: #7388d6;">)</span>
          ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Functor</span>.<span style="color: #0000cd;">id</span><span style="color: #228b22;"> F</span>
          ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">begin</span>
                <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span> ,<span style="color: #228b22;"> Id</span><span style="color: #7388d6;">)</span>
              &#8801;<span style="color: #7388d6;">&#10216;</span> &#8801;-<span style="color: #0000cd;">cong</span> <span style="color: #909183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">x</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span> , <span style="color: #0000cd;">x</span><span style="color: #709870;">)</span><span style="color: #909183;">)</span> <span style="color: #909183;">(</span>&#8801;-<span style="color: #0000cd;">sym</span> <span style="color: #0000cd;">rightId</span><span style="color: #909183;">)</span> <span style="color: #7388d6;">&#10217;</span>
                <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span> ,<span style="color: #228b22;"> Id</span> &#10814;<span style="color: #228b22;"> Id</span><span style="color: #7388d6;">)</span>
              &#8801;<span style="color: #7388d6;">&#10216;</span><span style="color: #228b22;"> Functor</span>.<span style="color: #0000cd;">comp</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">&#10217;</span>
                <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> ,<span style="color: #228b22;"> Id</span><span style="color: #7388d6;">)</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">g</span> ,<span style="color: #228b22;"> Id</span><span style="color: #7388d6;">)</span>
              &#8718; <span style="color: #88090B;">}</span>
        
        <span style="color: #0000cd;">natify</span> : <span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> :<span style="color: #228b22;"> Obj</span> &#119988;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">x</span> &#10230; <span style="color: #0000cd;">y</span> &#8594;<span style="color: #228b22;"> NatTrans</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">x</span><span style="color: #707183;">)</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">funcify</span> <span style="color: #0000cd;">y</span><span style="color: #707183;">)</span>
        <span style="color: #0000cd;">natify</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #0000cd;">f</span> &#8594; <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Id</span> <span style="color: #909183;">{</span>A <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> , <span style="color: #0000cd;">f</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span> , <span style="color: #707183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">a</span> <span style="color: #0000cd;">b</span> <span style="color: #0000cd;">g</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">begin</span>
                <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">g</span> ,<span style="color: #228b22;"> Id</span><span style="color: #7388d6;">)</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Id</span> , <span style="color: #0000cd;">f</span><span style="color: #7388d6;">)</span>
              &#8801;<span style="color: #7388d6;">&#10216;</span> &#8801;-<span style="color: #0000cd;">sym</span> <span style="color: #0000cd;">functors-preserve-composition</span> <span style="color: #7388d6;">&#10217;</span>
                <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">g</span> &#10814;<span style="color: #228b22;"> Id</span> ,<span style="color: #228b22;"> Id</span> &#10814; <span style="color: #0000cd;">f</span><span style="color: #7388d6;">)</span>
              &#8801;<span style="color: #7388d6;">&#10216;</span> &#8801;-<span style="color: #0000cd;">cong</span>&#8322; <span style="color: #909183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">x</span> , <span style="color: #0000cd;">y</span><span style="color: #709870;">)</span><span style="color: #909183;">)</span> <span style="color: #0000cd;">rightId</span> <span style="color: #0000cd;">leftId</span> <span style="color: #7388d6;">&#10217;</span>
                <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">g</span> , <span style="color: #0000cd;">f</span><span style="color: #7388d6;">)</span>
              &#8801;<span style="color: #7388d6;">&#10216;</span> &#8801;-<span style="color: #0000cd;">sym</span> <span style="color: #909183;">(</span>&#8801;-<span style="color: #0000cd;">cong</span>&#8322; <span style="color: #709870;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #907373;">(</span><span style="color: #0000cd;">x</span> , <span style="color: #0000cd;">y</span><span style="color: #907373;">)</span><span style="color: #709870;">)</span> <span style="color: #0000cd;">leftId</span> <span style="color: #0000cd;">rightId</span><span style="color: #909183;">)</span> <span style="color: #7388d6;">&#10217;</span>
                <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Id</span> &#10814; <span style="color: #0000cd;">g</span> , <span style="color: #0000cd;">f</span> &#10814;<span style="color: #228b22;"> Id</span><span style="color: #7388d6;">)</span>
              &#8801;<span style="color: #7388d6;">&#10216;</span> <span style="color: #0000cd;">functors-preserve-composition</span> <span style="color: #7388d6;">&#10217;</span>
                <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Id</span> , <span style="color: #0000cd;">f</span><span style="color: #7388d6;">)</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">g</span> ,<span style="color: #228b22;"> Id</span><span style="color: #7388d6;">)</span>
              &#8718;<span style="color: #707183;">)</span>
</pre>
</div>
<p>
end{comment}
</p>
</div>
</div>
</div>

<div id="outline-container-orgd490d31" class="outline-3">
<h3 id="orgd490d31"><span class="section-number-3">8.3</span> Pointwise extensions and the hom functor</h3>
<div class="outline-text-3" id="text-8-3">
<p>
Just as addition can be extended to number-valued functions pointwise <code>f + g ≔ λ x → f x + g x</code>,
we can do the same thing with functors.
</p>
<pre class="example">
 -- for bifunctor ~_⊕_~ and functors ~F, G~ we have a functor ~x ↦ F x ⊕ G x~
 pointwise : ∀ {ic jc id jd ix jx iy jy}
   {𝒞 : Category {ic} {jc}} {𝒟 : Category {id} {jd}} {𝒳 : Category {ix} {jx}} {𝒴 : Category {iy} {jy}}
   → Functor (𝒳 ⊗ 𝒴) 𝒟 → Functor 𝒞 𝒳 → Functor 𝒞 𝒴
   → Functor 𝒞 𝒟
 pointwise = {! exercise !}
</pre>
<p>
begin{comment}
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #0000cd;">pointwise</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">ic</span> <span style="color: #0000cd;">jc</span> <span style="color: #0000cd;">id</span> <span style="color: #0000cd;">jd</span> <span style="color: #0000cd;">ix</span> <span style="color: #0000cd;">jx</span> <span style="color: #0000cd;">iy</span> <span style="color: #0000cd;">jy</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">ic</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">jc</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">id</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">jd</span><span style="color: #88090B;">}}</span>
   <span style="color: #707183;">{</span>&#119987; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">ix</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">jx</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119988; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">iy</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">jy</span><span style="color: #88090B;">}}</span>
   <span style="color: #707183;">(</span>_&#8853;_ :<span style="color: #228b22;"> Functor</span> <span style="color: #7388d6;">(</span>&#119987; &#8855; &#119988;<span style="color: #7388d6;">)</span> &#119967;<span style="color: #707183;">)</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">F</span> :<span style="color: #228b22;"> Functor</span> &#119966; &#119987;<span style="color: #707183;">)</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">G</span> :<span style="color: #228b22;"> Functor</span> &#119966; &#119988;<span style="color: #707183;">)</span> &#8594;<span style="color: #228b22;"> Functor</span> &#119966; &#119967;
 <span style="color: #0000cd;">pointwise</span><span style="color: #228b22;"> Bi F G</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span><span style="color: #228b22;"> C</span> &#8594; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> Bi</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F C</span> , <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> G C</span><span style="color: #7388d6;">)</span>
   ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span><span style="color: #88090B;">}</span> <span style="color: #0000cd;">x</span>&#8594;<span style="color: #0000cd;">y</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">x</span>&#8594;<span style="color: #0000cd;">y</span> , <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">x</span>&#8594;<span style="color: #0000cd;">y</span><span style="color: #7388d6;">)</span>
   ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">begin</span>
          <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F Id</span> , <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G Id</span><span style="color: #7388d6;">)</span>
        &#8801;<span style="color: #7388d6;">&#10216;</span> &#8801;-<span style="color: #0000cd;">cong</span>&#8322; <span style="color: #909183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">f</span> , <span style="color: #0000cd;">g</span><span style="color: #709870;">)</span><span style="color: #909183;">)</span><span style="color: #228b22;"> </span><span style="color: #909183;">(</span><span style="color: #228b22;">Functor</span>.<span style="color: #0000cd;">id</span><span style="color: #228b22;"> F</span><span style="color: #909183;">)</span><span style="color: #228b22;"> </span><span style="color: #909183;">(</span><span style="color: #228b22;">Functor</span>.<span style="color: #0000cd;">id</span><span style="color: #228b22;"> G</span><span style="color: #909183;">)</span> <span style="color: #7388d6;">&#10217;</span>
          <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">Id</span> ,<span style="color: #228b22;"> Id</span><span style="color: #7388d6;">)</span>
        &#8801;<span style="color: #7388d6;">&#10216;</span> <span style="color: #0000cd;">functors-preserve-identities</span> <span style="color: #7388d6;">&#10217;</span>
         <span style="color: #228b22;"> Id</span>
        &#8718;
   ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span> <span style="color: #0000cd;">x</span>&#10230;<span style="color: #0000cd;">y</span> <span style="color: #0000cd;">y</span>&#10230;<span style="color: #0000cd;">z</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">begin</span>
       <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">x</span>&#10230;<span style="color: #0000cd;">y</span> &#10814; <span style="color: #0000cd;">y</span>&#10230;<span style="color: #0000cd;">z</span><span style="color: #909183;">)</span> , <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">x</span>&#10230;<span style="color: #0000cd;">y</span> &#10814; <span style="color: #0000cd;">y</span>&#10230;<span style="color: #0000cd;">z</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>
     &#8801;<span style="color: #7388d6;">&#10216;</span> &#8801;-<span style="color: #0000cd;">cong</span>&#8322; <span style="color: #909183;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">f</span> <span style="color: #0000cd;">g</span> &#8594; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span> <span style="color: #709870;">(</span><span style="color: #0000cd;">f</span> , <span style="color: #0000cd;">g</span><span style="color: #709870;">)</span><span style="color: #909183;">)</span><span style="color: #228b22;"> </span><span style="color: #909183;">(</span><span style="color: #228b22;">Functor</span>.<span style="color: #0000cd;">comp</span><span style="color: #228b22;"> F</span><span style="color: #909183;">)</span><span style="color: #228b22;"> </span><span style="color: #909183;">(</span><span style="color: #228b22;">Functor</span>.<span style="color: #0000cd;">comp</span><span style="color: #228b22;"> G</span><span style="color: #909183;">)</span> <span style="color: #7388d6;">&#10217;</span>
       <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">x</span>&#10230;<span style="color: #0000cd;">y</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">y</span>&#10230;<span style="color: #0000cd;">z</span> , <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">x</span>&#10230;<span style="color: #0000cd;">y</span> &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">y</span>&#10230;<span style="color: #0000cd;">z</span><span style="color: #7388d6;">)</span>
     &#8801;<span style="color: #7388d6;">&#10216;</span> <span style="color: #0000cd;">functors-preserve-composition</span> <span style="color: #7388d6;">&#10217;</span>
      <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">x</span>&#10230;<span style="color: #0000cd;">y</span> , <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">x</span>&#10230;<span style="color: #0000cd;">y</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> &#10814; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span> <span style="color: #909183;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">y</span>&#10230;<span style="color: #0000cd;">z</span> , <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">y</span>&#10230;<span style="color: #0000cd;">z</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>
     &#8718; <span style="color: #88090B;">}</span>
</pre>
</div>
<p>
end{comment}
</p>

<p>
Since <code>p ≡ (proj₁ p , proj₂ p)</code>, we have that the pointwise extension along the projections
is the orginal operation.
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #0000cd;">exempli-gratia</span> : &#8704; <span style="color: #707183;">{</span>&#119966; &#119967; &#119987; &#119988; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span>&#8467;&#8320;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#8467;&#8320;<span style="color: #88090B;">}}</span> <span style="color: #707183;">(</span>&#8853; :<span style="color: #228b22;"> Functor</span> <span style="color: #7388d6;">(</span>&#119987; &#8855; &#119988;<span style="color: #7388d6;">)</span> &#119967;<span style="color: #707183;">)</span>
                &#8594; <span style="color: #cd6600;">let</span> _<span style="color: #707183;">&#10216;</span>&#8853;<span style="color: #707183;">&#10217;</span>_ <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">pointwise</span> &#8853;
                   <span style="color: #cd6600;">in</span>
                     <span style="color: #228b22;"> Fst</span> <span style="color: #707183;">&#10216;</span>&#8853;<span style="color: #707183;">&#10217;</span><span style="color: #228b22;"> Snd</span> &#8801; &#8853;
 <span style="color: #0000cd;">exempli-gratia</span><span style="color: #228b22;"> Bi</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">funcext</span> <span style="color: #707183;">(</span>&#8801;-<span style="color: #0000cd;">cong</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">obj</span><span style="color: #228b22;"> Bi</span><span style="color: #7388d6;">)</span> &#8801;-<span style="color: #0000cd;">refl</span><span style="color: #707183;">)</span> <span style="color: #707183;">(</span>&#8801;-<span style="color: #0000cd;">cong</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">mor</span><span style="color: #228b22;"> Bi</span><span style="color: #7388d6;">)</span> &#8801;-<span style="color: #0000cd;">refl</span><span style="color: #707183;">)</span>
</pre>
</div>

<p>
An example bifunctor is obtained by extending the &#x2013;&gt; to morphisms:
given <code>f : A ⟶ B , g : C ⟶ D</code> we define <code>(f ⟶ g) : (B ⟶ C) → (A ⟶ C)</code> by
<code>λ h → f ⨾ h ⨾ g</code> as this is the only way to define it so as to meet the type requirements.
</p>
<div class="org-src-container">
<pre class="src src-org-agda"><span style="color: #228b22;"> Hom</span> : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> Functor</span> <span style="color: #707183;">(</span>&#119966; &#7506;&#7510; &#8855; &#119966;<span style="color: #707183;">)</span> &#119982;<span style="color: #0000cd;">e</span>&#120009;
   -- <span style="color: #0000cd;">hence</span> <span style="color: #0000cd;">contravariant</span> <span style="color: #cd6600;">in</span> &#8216;<span style="color: #0000cd;">first</span> <span style="color: #0000cd;">arg</span>&#8217; <span style="color: #0000cd;">and</span> <span style="color: #0000cd;">covaraint</span> <span style="color: #cd6600;">in</span> &#8216;<span style="color: #0000cd;">second</span> <span style="color: #0000cd;">arg</span>&#8217;
<span style="color: #228b22;"> Hom</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966;<span style="color: #88090B;">}</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">record</span> <span style="color: #707183;">{</span>
     <span style="color: #0000cd;">obj</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span><span style="color: #228b22;"> AB</span> &#8594; <span style="color: #cd6600;">let</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">A</span> ,<span style="color: #228b22;"> B</span><span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> AB</span> <span style="color: #cd6600;">in</span><span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span>
   ; <span style="color: #0000cd;">mor</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">fg</span> &#8594; <span style="color: #cd6600;">let</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> , <span style="color: #0000cd;">g</span><span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">fg</span> <span style="color: #cd6600;">in</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #0000cd;">h</span> &#8594; <span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">h</span> &#10814; <span style="color: #0000cd;">g</span>
   ; <span style="color: #0000cd;">id</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span>AB<span style="color: #88090B;">}</span> &#8594; <span style="color: #cd6600;">let</span><span style="color: #228b22;"> </span><span style="color: #7388d6;">(</span><span style="color: #228b22;">A</span> ,<span style="color: #228b22;"> B</span><span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> AB</span> <span style="color: #cd6600;">in</span> <span style="color: #0000cd;">extensionality</span> <span style="color: #7388d6;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">h</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">begin</span>
       <span style="color: #228b22;"> Id</span> &#10814; <span style="color: #0000cd;">h</span> &#10814;<span style="color: #228b22;"> Id</span>
      &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #0000cd;">leftId</span> <span style="color: #909183;">&#10217;</span>
        <span style="color: #0000cd;">h</span> &#10814;<span style="color: #228b22;"> Id</span>
      &#8801;<span style="color: #909183;">&#10216;</span> <span style="color: #0000cd;">rightId</span> <span style="color: #909183;">&#10217;</span>
        <span style="color: #0000cd;">h</span>
      &#8718;<span style="color: #7388d6;">)</span>
   ; <span style="color: #0000cd;">comp</span> <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">x</span> <span style="color: #0000cd;">y</span> <span style="color: #0000cd;">z</span> <span style="color: #0000cd;">fg</span> <span style="color: #0000cd;">fg</span>&#8217;<span style="color: #88090B;">}</span> &#8594; <span style="color: #cd6600;">let</span> <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span> , <span style="color: #0000cd;">g</span><span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">fg</span> ; <span style="color: #7388d6;">(</span><span style="color: #0000cd;">f</span>&#8217; , <span style="color: #0000cd;">g</span>&#8217;<span style="color: #7388d6;">)</span> <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">fg</span>&#8217; <span style="color: #cd6600;">in</span> <span style="color: #0000cd;">extensionality</span> <span style="color: #7388d6;">(</span><span style="color: #cd6600;">&#955;</span> <span style="color: #909183;">{</span><span style="color: #0000cd;">h</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">begin</span>
            <span style="color: #909183;">(</span><span style="color: #0000cd;">f</span>&#8217; &#10814; <span style="color: #0000cd;">f</span><span style="color: #909183;">)</span> &#10814; <span style="color: #0000cd;">h</span> &#10814; <span style="color: #909183;">(</span><span style="color: #0000cd;">g</span> &#10814; <span style="color: #0000cd;">g</span>&#8217;<span style="color: #909183;">)</span>
          &#8801;<span style="color: #909183;">&#10216;</span><span style="color: #404040;"> as</span>soc <span style="color: #909183;">&#10217;</span>
            <span style="color: #0000cd;">f</span>&#8217; &#10814; <span style="color: #909183;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #709870;">(</span><span style="color: #0000cd;">h</span> &#10814; <span style="color: #907373;">(</span><span style="color: #0000cd;">g</span> &#10814; <span style="color: #0000cd;">g</span>&#8217;<span style="color: #907373;">)</span><span style="color: #709870;">)</span><span style="color: #909183;">)</span>
          &#8801;<span style="color: #909183;">&#10216;</span> &#10814;-<span style="color: #0000cd;">cong</span>&#8322; <span style="color: #709870;">(</span>&#8801;-<span style="color: #0000cd;">sym</span><span style="color: #404040;"> as</span>soc<span style="color: #709870;">)</span> <span style="color: #909183;">&#10217;</span>
            <span style="color: #0000cd;">f</span>&#8217; &#10814; <span style="color: #909183;">(</span><span style="color: #709870;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">h</span><span style="color: #709870;">)</span> &#10814; <span style="color: #709870;">(</span><span style="color: #0000cd;">g</span> &#10814; <span style="color: #0000cd;">g</span>&#8217;<span style="color: #709870;">)</span><span style="color: #909183;">)</span>
          &#8801;<span style="color: #909183;">&#10216;</span> &#10814;-<span style="color: #0000cd;">cong</span>&#8322; <span style="color: #709870;">(</span>&#8801;-<span style="color: #0000cd;">sym</span><span style="color: #404040;"> as</span>soc<span style="color: #709870;">)</span> <span style="color: #909183;">&#10217;</span>
            <span style="color: #0000cd;">f</span>&#8217; &#10814; <span style="color: #909183;">(</span><span style="color: #709870;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">h</span><span style="color: #709870;">)</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span> &#10814; <span style="color: #0000cd;">g</span>&#8217;
          &#8801;<span style="color: #909183;">&#10216;</span> &#10814;-<span style="color: #0000cd;">cong</span>&#8322; <span style="color: #709870;">(</span>&#8801;-<span style="color: #0000cd;">cong</span>&#8322; _&#10814;_<span style="color: #404040;"> as</span>soc &#8801;-<span style="color: #0000cd;">refl</span><span style="color: #709870;">)</span> <span style="color: #909183;">&#10217;</span>
            <span style="color: #0000cd;">f</span>&#8217; &#10814; <span style="color: #909183;">(</span><span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">h</span> &#10814; <span style="color: #0000cd;">g</span><span style="color: #909183;">)</span> &#10814; <span style="color: #0000cd;">g</span>&#8217;
          &#8718;<span style="color: #7388d6;">)</span><span style="color: #88090B;">}</span>
            <span style="color: #cd6600;">where</span>
              &#10814;-<span style="color: #0000cd;">cong</span>&#8322; : &#8704; <span style="color: #707183;">{</span>A<span style="color: #228b22;"> B C</span> :<span style="color: #228b22;"> Obj</span> &#119966;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">g</span> <span style="color: #0000cd;">g</span>&#8217; :<span style="color: #228b22;"> B</span> &#10230;<span style="color: #228b22;"> C</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">g</span> &#8801; <span style="color: #0000cd;">g</span>&#8217; &#8594; <span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span> &#8801; <span style="color: #0000cd;">f</span> &#10814; <span style="color: #0000cd;">g</span>&#8217;
              &#10814;-<span style="color: #0000cd;">cong</span>&#8322; <span style="color: #cd6600;">=</span> &#8801;-<span style="color: #0000cd;">cong</span>&#8322; _&#10814;_ &#8801;-<span style="color: #0000cd;">refl</span>
</pre>
</div>
<p>
The naming probably comes from the algebra/monoid case where the functors are
monoid <code>hom~omorphisms. Some prefer to use the name ~Mor</code>, short for <code>mor~phisms,
and that’s cool too. While Haskell programmers might call this the ~Reader</code> functor.
</p>

<p>
Usual notation for this functor is <code>Hom</code>, but I like Fokkinga’s much better.
He uses <code>(_⟶_)</code> and writes <code>(f ⟶ g) = λ h • f ⨾ h ⨾ g</code>
&#x2014;the first argument of Hom is the first argument of the composition and the last
argument to Hom is the last argument of the resulting composition :-)
</p>
</div>
</div>
</div>

<div id="outline-container-org851f4cd" class="outline-2">
<h2 id="org851f4cd"><span class="section-number-2">9</span> Simplicity ~𝒰~nderlies complexity</h2>
<div class="outline-text-2" id="text-9">
<blockquote>
<p>
‘‘One way is to make it so ~𝒮~imple that there are obviously no deficiencies, and the other way is to
make it so ~𝒞~omplicated that there are no obvious deficiencies. The first method is far more
difficult. It demands the same skill, devotion, insight, and even inspiration as the discovery of
the simple physical laws which ~𝒰~nderlie the complex phenomena of nature.’’
---\href{https://en.wikiquote.org/wiki/C._A._R._Hoare}{C.A.R. Hoare}
</p>
</blockquote>

<p>
%% The complex philosophy behinds games such as Chess and
%% \href{http://playgo.to/iwtg/en/}{Go} arise from some simple board game rules.
</p>

<p>
In this section we discuss what it means to be a ‘forgetful functor’?
</p>

<p>
The modifier ‘forgetful’ is meaningful when there’s a notion of extra structure.
Indeed any functor <code>F : 𝒞 ⟶ 𝒮</code> can be thought of as forgetful by construing the objects of
<code>𝒞</code> as objects of <code>𝒮</code> with extra structure.
Mostly: \emph{you know it (to be forgetful) when you see it.}
</p>
</div>

<div id="outline-container-org33e7de5" class="outline-3">
<h3 id="org33e7de5"><span class="section-number-3">9.1</span> Being forgetful: from injections to faithful functors</h3>
<div class="outline-text-3" id="text-9-1">
<p>
A common example from set theory is the ‘inclusion’ of a subset <code>A</code> of <code>B</code>, the injection
<code>ι : A ↪ B : a ↦ a</code> &#x2014;it is essentially a form of ‘type casting’: <code>a ∈ A</code> and <code>ι a = a ∈ B</code>.
Such injections ‘forget’ the property that the argument is actually a member of a specified
subset. Indeed, construing sets as categories then functions becomes functors and inclusions
are then forgetful functors!
</p>

<p>
Since a functor consists of two maps and some properties, we can speak about properties of the
functor and about properties of either of its maps.
The common definitions are a functor <code>F</code> is <code>faithful</code> if its operation
on morphisms is <code>injective, and it is ~full</code> if morphisms starting and ending at <code>F</code> are a result
of applying <code>F</code>; i.e., <code>F₁</code> is surjective \emph{on} the image of <code>F₀</code>:
<code>∀ x,y ∶ Obj • ∀ g ∶ F₀ x ⟶ F₀ y • ∃ f ∶ x ⟶ y • F₁ f = g</code>.
</p>

<p>
Now we can generalize the previous example.
Every faithful functor <code>F : 𝒞 ⟶ 𝒟</code> can be construed as forgetful:
the <code>𝒞</code>-maps can be embedded into the <code>𝒟</code>-maps, since <code>F</code> is faithful, and so can be thought of
as a special sub-collection of the <code>𝒟</code>-maps; then <code>F</code> ‘forgets’ the property of being in this
special sub-collection.
</p>


<p>
Are faithful functors in abundance? Well any functor forgetting only axioms
(and/or structure) is faithful:
</p>

<p>
suppose <code>𝒞</code> consists of <code>𝒟</code> objects satisfying some axioms and <code>𝒟</code> maps preserving this structure:
that is, pairs of an object/morphism with a proof that it satisfies the axioms/preserves-structure.
Then <code>F : 𝒞 ⟶ 𝒟</code> forgets only axioms means <code>F (f, proof) = f</code>.
Now given, <code>F (f , prf) = F (g , prf) ⇔ f ≡ g ⇔ (f , prf) = (g , prf)</code> &#x2013; equality does not (extensionally) depend on proof components.
Hence, faithful :-)
</p>

<p>
(Likewise for forgetting extra structure).
</p>

<p>
Of course we’re not saying all forgetful functors are necessarily faithful.
A simple counterexample is the absolute value function:
given a real number <code>x</code> it’s absolute value <code>∣x∣</code> is obtained by totally ignoring its sign
&#x2014;of course <code>x</code> and <code>∣x∣</code> are equidistant from the 0 and equidistant-from-0 is an equivalence
relation and so the the two are isomorphic in some sense.
</p>

<p>
begin{comment}
E is an equivalence, where x E y ≡ ∣ x - y ∣ = 0
</p>

<p>
Refl: x E x ⇐ ∣ x - x ∣ = 0 ⇐ ⊤
Sym:  x E y ⇒ ∣x - y∣ = 0 ⇒ ∣y - x∣ = 0 ⇒ y E x
Trans: x E y E z ⇒ ∣x - y∣ = ∣y - z∣ = 0 ⇒ ∣x - z∣ = ∣x - y + y - z∣ ≤ ∣x - y∣ + ∣y - z∣ = 0 + 0 = 0
⇒ x E z
</p>

<p>
A simpler definition of E is x E y ≡ ∣x∣ = ∣y∣
and that is the kernel of the absolute function and so an equivalence.
end{comment}
</p>

<p>
Motivated by this, given a set <code>S</code> it’s size is denoted <code>∣ S ∣</code> which totally forgets about the
elements of the set &#x2014;of course it can be shown that two sets are isomorphic precisely if they are
equinumerous.
%
I assume it is with these as motivators, some people write <code>∣·∣</code> for a forgetful functor.
</p>

<p>
\noindent\rule[0.5ex]{\linewidth}{1pt}
</p>
</div>
</div>

<div id="outline-container-org43fbfba" class="outline-3">
<h3 id="org43fbfba"><span class="section-number-3">9.2</span> Of basis vectors</h3>
<div class="outline-text-3" id="text-9-2">
<p>
If you’ve ever studied abstract algebra &#x2014;the math with vector spaces&#x2014; then you may recall that
a collection of vectors <code>B</code> is called a ‘basis’ if every vector can be written as a linear
combination of these vectors: for any vector <code>v</code>, there are scalars <code>c₁, …, cₙ</code> and vectors
<code>b₁, …, bₙ</code> in <code>B</code> with <code>v = c₁·b₁ + ⋯ + cₙ·bₙ</code>. That is, a basis is a collection of ‘building
blocks’ for the vector space. Then any function <code>f</code> between basis sets immediately lifts to a
linear transformation (think vector space morphism) <code>F</code> as follows: given a vector <code>v</code>, since we
have a basis, we can express it as <code>c₁·b₁ + ⋯ + cₙ·bₙ</code>, now define
<code>F v ≔ c₁·(f b₁) + ⋯ + cₙ·(f bₙ)</code>. Sweet! To define a complicated linear transformation of vector
spaces, it more than suffices to define a plain old simple function of basis sets.
Moreover, by definition, such <code>F</code> maps basis vectors to basis vectors: <code>f = ι ⨾ F</code> where
<code>ι : B ↪ V</code> is the inclusion that realises basis vectors as just usual vectors in the vector
space.  Slogan: vector space maps are determined by where they send their basis, and basis-vectors
are preserved.
</p>

<p>
In the case of <code>(List A, ++, [])</code> we may consider <code>A</code> to be a ‘basis’ of the monoid &#x2014;indeed,
every list can be written as a linear combination of elements of <code>A</code>, given list
<code>[x₁, …, xₙ] : List A</code> we have <code>[x₁, …, xₙ] = x₁ + ⋯ + xₙ</code> where <code>x + y ≔ [x] ++ [y]</code>.
As similar reasoning as above, or if you have familarity with <code>foldr~/~reduce</code>, we have a slogan:
monoid homomorphisms from lists are determined by where they send their basis and basis-vectors
are preserved.
</p>

<p>
Now the general case, suppose <code>F ⊣ U</code> is a free-forgetful adjunction with <code>U : 𝒞 ⟶ 𝒮</code>; that is,
given a simple-object <code>S</code> there’s simple-map <code>ι : S ⟶ U(F S)</code> &#x2014;a way to realise ‘basis
vectors’&#x2014; such that for any complicated-object <code>C</code> and simple-maps <code>φ : S ⟶ U C</code>, there is a
unique complicated-map <code>Φ : F S ⟶ C</code> that preserves the basis vectors: <code>φ = ι ⨾ U Φ</code>.
By analogy to the previous two cases, we may
consdier <code>U X</code> to be a ‘basis’, and make the slogan: complicated-maps from free objects are
determined by where they send their basis and ‘basis vectors’ are preserved.
</p>

<p>
[
</p>

<p>
In more categorical lingo, one says <code>ι</code> is the ‘insertion of generators’.
</p>

<p>
Question: does the way we took <code>ι</code> in the previous graph show that it is a natural
transformation <code>ι  : Id ⟶ F ⨾ U</code> ?
&#x2014;the naturality just says that a ‘homomorphism’ <code>F f</code> on the free object is completely detemined
by what <code>f</code> does to the generators.
</p>

<p>
]
</p>
</div>
</div>

<div id="outline-container-org16acc1f" class="outline-3">
<h3 id="org16acc1f"><span class="section-number-3">9.3</span> Of adjunctions</h3>
<div class="outline-text-3" id="text-9-3">
<p>
An adjunction <code>L ⊣ U</code>, where the <code>L~ower adjoint is from ~𝒮</code> to <code>𝒞</code> and the ~U~pper adjoint is in
the opposite direction, lends itself to an elemntary interpretation if we consider
<code>𝒞</code> to be some universe of <code>𝒞~omplicated items of study, while ~𝒮</code> to be a universe of <code>𝒮~imple
items of study. Then adjointness implies that given a simple-object ~S</code> and a complicated-object
<code>C</code>, a simple-map <code>X ⟶ U C</code> corresponds to a complicated-map <code>L S ⟶ C</code>. To work with
complicated-maps it is more than enough to work with simple-maps!
</p>

<p>
<code>now we say F : 𝒞 ⟶ 𝒟 is adjoint to G : 𝒟 ⟶ 𝒞, written F ⊣ G, iff</code>
~ (F ∘ X ⟶₁ Y) ≅ (X ⟶₁ G ∘ Y)  ~ (in FUNC)
</p>

<div class="org-src-container">
<pre class="src src-org-agda"> _&#8867;&#8320;_ : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; &#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}</span> &#8594;<span style="color: #228b22;"> Functor</span> &#119966; &#119967; &#8594;<span style="color: #228b22;"> Functor</span> &#119967; &#119966; &#8594; <span style="color: #cd6600;">Set</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">i</span> &#8845; <span style="color: #0000cd;">j</span><span style="color: #707183;">)</span>
 _&#8867;&#8320;_ <span style="color: #707183;">{</span>&#119966; <span style="color: #cd6600;">=</span> &#119966;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119967;<span style="color: #88090B;">}</span><span style="color: #228b22;"> F G</span> <span style="color: #cd6600;">=</span>
                          <span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">F</span> &#8242; &#8728;<span style="color: #228b22;"> X</span>  &#10230;&#8345;&#8336;&#8348;<span style="color: #228b22;"> Y</span><span style="color: #707183;">)</span> &#8773;<span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">X</span> &#10230;&#8345;&#8336;&#8348;<span style="color: #228b22;"> G</span> &#8728;<span style="color: #228b22;"> Y</span><span style="color: #707183;">)</span> <span style="color: #0000cd;">within</span><span style="color: #228b22;"> Func</span> <span style="color: #707183;">(</span>&#119966; &#7506;&#7510; &#8855; &#119967;<span style="color: #707183;">)</span> &#119982;<span style="color: #0000cd;">e</span>&#120009;
   <span style="color: #cd6600;">where</span>
    <span style="color: #228b22;"> X</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Fst</span> ;<span style="color: #228b22;"> Y</span> <span style="color: #cd6600;">=</span><span style="color: #228b22;"> Snd</span> ; _&#8242; <span style="color: #cd6600;">=</span> <span style="color: #0000cd;">opify</span> -- <span style="color: #0000cd;">only</span> <span style="color: #0000cd;">changes</span> <span style="color: #0000cd;">types</span>
          
     <span style="color: #cd6600;">infix</span> <span style="color: #a020f0;">5</span> _&#10230;&#8345;&#8336;&#8348;_
     _&#10230;&#8345;&#8336;&#8348;_ : &#8704; <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119964; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}</span> &#8594;
           <span style="color: #228b22;"> Functor</span> <span style="color: #707183;">(</span>&#119966; &#7506;&#7510; &#8855; &#119967;<span style="color: #707183;">)</span> <span style="color: #707183;">(</span>&#119964; &#7506;&#7510;<span style="color: #707183;">)</span> &#8594;<span style="color: #228b22;"> Functor</span> <span style="color: #707183;">(</span>&#119966; &#7506;&#7510; &#8855; &#119967;<span style="color: #707183;">)</span> &#119964; &#8594;<span style="color: #228b22;"> Functor</span> <span style="color: #707183;">(</span>&#119966; &#7506;&#7510; &#8855; &#119967;<span style="color: #707183;">)</span> &#119982;<span style="color: #0000cd;">e</span>&#120009;
     _&#10230;&#8345;&#8336;&#8348;_ <span style="color: #cd6600;">=</span> <span style="color: #cd6600;">&#955;</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> &#119964;<span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">pointwise</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">Hom</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span>&#119964;<span style="color: #88090B;">}</span><span style="color: #707183;">)</span>
</pre>
</div>
<p>
Note that if we use the built-in rewrite mechanism by adding
<code>{𝒞 𝒟 : Category {ℓ₀} {ℓ₀}} → Functor (𝒞 ᵒᵖ) (𝒟 ᵒᵖ) ≡ Functor 𝒞 𝒟</code> as a rewrite rule, then
might can get away without using <code>opify</code>.
</p>

<p>
We want to say for any objects <code>X, Y</code>, the collection of morphisms <code>(F A ⟶ B)</code> is isomorphic
to the collection <code>(A ⟶ G B)</code> and naturally so in <code>A</code> and <code>B</code>.
</p>

<p>
Unfolding it, we have
</p>
<div class="org-src-container">
<pre class="src src-org-agda"> <span style="color: #cd6600;">record</span> _&#8867;_ <span style="color: #707183;">{</span><span style="color: #0000cd;">i</span> <span style="color: #0000cd;">j</span> <span style="color: #0000cd;">i</span>&#8217; <span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#119966; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span><span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span><span style="color: #88090B;">}}</span> <span style="color: #707183;">{</span>&#119967; :<span style="color: #228b22;"> Category</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">i</span>&#8217;<span style="color: #88090B;">}</span> <span style="color: #7388d6;">{</span><span style="color: #0000cd;">j</span>&#8217;<span style="color: #88090B;">}}</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">F</span> :<span style="color: #228b22;"> Functor</span> &#119966; &#119967;<span style="color: #707183;">)</span><span style="color: #228b22;"> </span><span style="color: #707183;">(</span><span style="color: #228b22;">G</span> :<span style="color: #228b22;"> Functor</span> &#119967; &#119966;<span style="color: #707183;">)</span>
   : <span style="color: #cd6600;">Set</span> <span style="color: #707183;">(</span><span style="color: #0000cd;">j</span>&#8217; &#8845; <span style="color: #0000cd;">i</span>&#8217; &#8845; <span style="color: #0000cd;">j</span> &#8845; <span style="color: #0000cd;">i</span><span style="color: #707183;">)</span> <span style="color: #cd6600;">where</span>
   <span style="color: #cd6600;">field</span>
     &#8970;_&#8971; : &#8704; <span style="color: #707183;">{</span>X<span style="color: #228b22;"> Y</span><span style="color: #88090B;">}</span> &#8594; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F X</span> &#10230;<span style="color: #228b22;"> Y</span> &#8594;<span style="color: #228b22;"> X</span> &#10230; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> G Y</span> -- <span style="color: #0000cd;">left-adjunct</span> , ~L &#8776; &#8970;~
     &#8968;_&#8969; : &#8704; <span style="color: #707183;">{</span>X<span style="color: #228b22;"> Y</span><span style="color: #88090B;">}</span> &#8594;<span style="color: #228b22;"> X</span> &#10230; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> G Y</span> &#8594; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F X</span> &#10230;<span style="color: #228b22;"> Y</span> -- <span style="color: #0000cd;">right-adjunct</span>, ~<span style="color: #0000cd;">r</span> &#8776; &#8968;~
     <span style="color: #0000cd;">lid</span> : &#8704; <span style="color: #707183;">{</span>X<span style="color: #228b22;"> Y</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">d</span> : <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F X</span> &#10230;<span style="color: #228b22;"> Y</span><span style="color: #88090B;">}</span> &#8594; &#8968; &#8970; <span style="color: #0000cd;">d</span> &#8971; &#8969; &#8801; <span style="color: #0000cd;">d</span>
     <span style="color: #0000cd;">rid</span> : &#8704; <span style="color: #707183;">{</span>X<span style="color: #228b22;"> Y</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">c</span> :<span style="color: #228b22;"> X</span> &#10230; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> G Y</span><span style="color: #88090B;">}</span> &#8594; &#8970; &#8968; <span style="color: #0000cd;">c</span> &#8969; &#8971; &#8801; <span style="color: #0000cd;">c</span>
     <span style="color: #0000cd;">lfusion</span> : &#8704; <span style="color: #707183;">{</span>A<span style="color: #228b22;"> B C D</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#968; : <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> F B</span> &#10230;<span style="color: #228b22;"> C</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">g</span> :<span style="color: #228b22;"> C</span> &#10230;<span style="color: #228b22;"> D</span><span style="color: #88090B;">}</span>
             &#8594; &#8970; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">f</span> &#10814; &#968; &#10814; <span style="color: #0000cd;">g</span> &#8971; &#8801; <span style="color: #0000cd;">f</span> &#10814; &#8970; &#968; &#8971; &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">g</span>
     <span style="color: #0000cd;">rfusion</span> : &#8704; <span style="color: #707183;">{</span>A<span style="color: #228b22;"> B C D</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">f</span> :<span style="color: #228b22;"> A</span> &#10230;<span style="color: #228b22;"> B</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span>&#968; :<span style="color: #228b22;"> B</span> &#10230; <span style="color: #0000cd;">obj</span><span style="color: #228b22;"> G C</span><span style="color: #88090B;">}</span> <span style="color: #707183;">{</span><span style="color: #0000cd;">g</span> :<span style="color: #228b22;"> C</span> &#10230;<span style="color: #228b22;"> D</span><span style="color: #88090B;">}</span>
             &#8594; &#8968; <span style="color: #0000cd;">f</span> &#10814; &#968; &#10814; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> G</span> <span style="color: #0000cd;">g</span> &#8969; &#8801; <span style="color: #0000cd;">mor</span><span style="color: #228b22;"> F</span> <span style="color: #0000cd;">f</span> &#10814; &#8968; &#968; &#8969; &#10814; <span style="color: #0000cd;">g</span>
</pre>
</div>
<p>
This is easier for verifying an adjunction, while the former is easier for remembering and understanding what an adjunction actually it.
</p>

<pre class="example">
  Hom : {𝒞 : Category {ℓ₀} {ℓ₀} } → Functor (𝒞 ᵒᵖ ⊗ 𝒞) 𝒮e𝓉
  Y : ∀ {𝒞 𝒟} → Functor (𝒞 ⊗ 𝒟) 𝒟
  X : ∀ {𝒞 𝒟} → Functor (𝒞 ⊗ 𝒟) 𝒞
   pointwise : ∀ {𝒞 𝒳 𝒴 : Category {ℓ₀} {ℓ₀}} {i j} {𝒟 : Category {i} {j}}
   (_⊕_ : Functor (𝒳 ⊗ 𝒴) 𝒟) (F : Functor 𝒞 𝒳) (G : Functor 𝒞 𝒴) → Functor 𝒞 𝒟

  Hom {𝒜} : 𝒜 ᵒᵖ ⊗ 𝒜 ⟶ 𝒮e𝓉
  F : 𝒞 ᵒᵖ ⟶ 𝒟
  X : 𝒞 ᵒᵖ × 𝒟 ⟶ 𝒞 ᵒᵖ
  X ⨾ F : 𝒞 ᵒᵖ × 𝒟 ⟶ 𝒟
  Y : 𝒞 ᵒᵖ × 𝒟 ⟶ 𝒟
</pre>

<p>
As the slogan goes ‘adjunctions are everywhere’.
They can be said to capture the notions of optimization and efficiency, but also that of simplicity.
</p>

<p>
For example, the supremum of a function is defined to be an upper bound of its image set and the least such bound.
Formally, this definition carries a few quantifiers and so a bit length.
More elegantly, we can say the supremum operation is left-adjoint to the constant function: <code>sup ⊣ K</code>
which means <code>∀ z • sup f ≤ z ⇔ f ≤ K z</code> where <code>K x y = x</code> and the <code>≤</code> on the right is point-wise.
This formulation of supremum is not only shorter to write but easier to use in calculational proofs.
</p>

<p>
For the efficiency bit, recall that it is efficient to specify a ~𝒮~imple-map, then use the adjuction, to obtain
a ~𝒞~omplicated-map. Recall in the last paragraph how we define the super complicated notion of supremum of a function
in terms of the most elementary constant function!
</p>

<p>
Adjunctions over poset categories are called ‘Galois connections’ and a good wealth of
material on them can be found in nearly any writing by \href{http://www.cs.nott.ac.uk/~psarb2/papers/papers.html}{Backhouse et al},
while a very accessible introduction is by \href{http://www.cs.nott.ac.uk/~psarb2/MPC/galois.ps.gz}{Aarts},
and there is also an Agda mechanisation by \href{http://relmics.mcmaster.ca/RATH-Agda/AContext-2.1.pdf}{Kahl et al}.
</p>

<p>
Regarding forgetful functors:
generally, but not always, forgetful functors are faithful and have left adjoints
&#x2014;because the notion of ‘forget’ ought to have a corresponding notion of ‘free’.
An exception to this is the category of fields, which has a forgetful functor to the
category of sets with no left adjoint. [Source: wikipedia]
</p>
</div>
</div>

<div id="outline-container-org2e1a975" class="outline-3">
<h3 id="org2e1a975"><span class="section-number-3">9.4</span> adjunction examples</h3>
<div class="outline-text-3" id="text-9-4">
<ul class="org-ul">
<li>Another awesome thing about adjunctions <code>L ⊣ U</code> is that they give us ‘representable functors’,
aka ‘the best kind of functors’, when terminal objects exist.
An object <code>𝟙</code> is ‘terminal’ if
for any object <code>A</code> there is a unique morphism <code>! {A} : A ⟶ 𝟙</code>. In <code>𝒮e𝓉</code> we have</li>
</ul>
<p>
~  (A ⟶ 𝟙) ≅ 𝟙~ and <code>(𝟙 ⟶ A) ≅ A</code>. Specializing the adjunction, where <code>U : 𝒞 ⟶ 𝒮e𝓉</code>, to
  a given set <code>A</code> and <code>𝟙</code> we obtain <code>(L 𝟙 ⟶ A) ≅ (𝟙 ⟶ U A) ≅ U A</code> and so one says
  ‘~U~ is represented by <code>L 𝟙~’. In particular, if ~𝒞</code> is built on <code>𝒮e𝓉</code> by adding some structure
  and we are interested in the utilising the elements of an object <code>A</code> then it suffices to utilise
  the maps <code>L 𝟙 ⟶ A</code>.
</p>

<ul class="org-ul">
<li>In the case of a free-forgetful adjunction, this says that a forgetful functor is represented by the
free object with generator <code>𝟙</code>.</li>

<li>For example, for monoids we have <code>𝟙 ≔ ({*}, ⊕, *), x ⊕ y ≔ ⋆</code> is the one-point monoid.
Then every monoi-homomorpgism from <code>𝟙</code> just picks out an element of the carrier of a monoid and so
<code>(𝟙 ⟶ M) ≅ 𝒰 M</code> where <code>𝒰</code> is the forgetful functors for monoids mentioned in the introduction.</li>
</ul>
</div>
</div>

<div id="outline-container-org6f7c436" class="outline-3">
<h3 id="org6f7c436"><span class="section-number-3">9.5</span> Concluding remarks</h3>
<div class="outline-text-3" id="text-9-5">
<p>
A final note about free objects &#x2014;arising from an adjoint to a forgetful functor.
</p>

<p>
‘‘The free object is generic’’: the only truths provable for the free
object are precisely those that hold for every complicated-object.
</p>

<p>
(Begin squinting eyes)
</p>

<p>
This follows from the
definition of adjunction which says we can construct a unique morphism between complicated-objects
from a simple-map and by naturality we may transport any proof for the free object to any
complicated object.
</p>

<p>
(Feel ‘free’ to stop squinting your eyes)
</p>


<p>
For futher reading consider reading the adjoint article at
\href{http://www.comicbooklibrary.org/articles/Left_adjoint}{the combic book library}
and for more on the adjective forgetful see
\href{https://ncatlab.org/nlab/show/forgetful+functor}{ncatlab}
or \href{http://mathworld.wolfram.com/ForgetfulFunctor.html}{mathworld}
A nice list of common free objects can be found
\href{https://en.wikipedia.org/wiki/Free_object#List_of_free_objects}{here}.
</p>

<p>
<code>⟦</code>
Challenge; true or false: for forgetful <code>U : 𝒞 ⟶ 𝒮e𝓉</code> a free functor exists when <code>𝒞</code> is a
monad over <code>𝒮e𝓉</code>?
<code>⟧</code>
</p>

<p>
You might be asking, ‘musa, when am I ever going to encounter this in daily life?
In a popular setting?’ This concept is everywhere, even inclusions as mentioned earlier are an
instance. For the second question, enjoy
\href{https://www.youtube.com/watch?v=BipvGD-LCjU}{this lovely group} &#x2013;they use the words ‘forgetful functors’ ;)
</p>

<p>
The remainder of this document can be seen as one fully-worked out example of constructing a
free functor for the forgetful <code>𝒰</code> defined above.
</p>

<p>
begin{comment}
</p>
</div>
</div>
<div id="outline-container-org49bbd9e" class="outline-3">
<h3 id="org49bbd9e"><span class="section-number-3">9.6</span> Free first-order logics</h3>
<div class="outline-text-3" id="text-9-6">
\begin{code}
module RSD where

  data 𝟙 : Set where ⋆ : 𝟙

  open import Data.Vec renaming (_∷_ to _,,_) -- , already in use for products :/

  data Term (𝒮 : Signature) (Carrier : Set) (Var : Set) : Set where
    var : Var → Term 𝒮 Carrier Var
    con : Carrier → Term 𝒮 Carrier Var
    app : (i : Fin 𝒩) → Vec (Term 𝒮 Carrier Var) (lookup i ar) → Term 𝒮 Carrier Var
    -- ~app i [t₁, …, tₖ]~ read as: apply i-th function-symbol ~fᵢ~ to ~k = arity (fᵢ)~ terms ~t₁, …, tₖ~

  infix 10 _≈_
  _≈_ : {A B : Set} → A → B → A × B
  _≈_ = _,_
  
  record Logic (𝒮 : Signature) (Carrier : Set) (Var : Set) : Set where
    field
      #Eqns : ℕ
      eqns : Vec ((Term 𝒮 Carrier Var) × (Term 𝒮 Carrier Var)) #Eqns

  -- use integers as varaibles
  MyVars = ℕ
  x y z : MyVars
  x = 0
  y = 1
  z = 2
  -- alternative is to parameterise module by a universe of variables.

  MonoidThry : {X : Set} → Logic MonSig X MyVars
  MonoidThry {X} = record { #Eqns = 3 ;
    eqns = ε · var x ≈ var x
      ,, var x · ε ≈ var x
      ,, (var x · var y) · var z ≈ var x · (var y · var z)
      ,, [] }
    where
      -- the function symbols
      u = fromℕ≤ {0} {2} (s≤s z≤n)
      m = fromℕ≤ {1} {2} (s≤s (s≤s z≤n))

      -- conventional monoid notation
      ε : Term MonSig X MyVars
      ε = app u []
      _·_ : (l r : Term MonSig X MyVars) → Term MonSig X MyVars
      _·_ = λ l r → app m (l ,, r ,, [])
\end{code}

<p>
end{comment}
</p>
</div>
</div>
</div>
</div>
</body>
</html>
